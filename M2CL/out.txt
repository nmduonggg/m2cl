Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
env0_in_acc   env0_out_acc  env1_in_acc   env1_out_acc  env2_in_acc   env2_out_acc  env3_in_acc   env3_out_acc  epoch         loss          mem_gb        step          step_time    
0.1866992068  0.1613691932  0.1780383795  0.1581196581  0.1205089820  0.1347305389  0.1851145038  0.1872611465  0.0000000000  8.4749317169  1.3144865036  0             1.9611334801 
0.9225137279  0.9168704156  0.9168443497  0.8910256410  0.9820359281  0.9311377246  0.6269083969  0.6267515924  1.7964071856  5.4642556338  1.4509634972  300           0.3182336187 
0.9591214155  0.9168704156  0.9482942431  0.9059829060  0.9902694611  0.9520958084  0.6797073791  0.6764331210  3.5928143713  5.3435362506  1.4509634972  600           0.3072104541 
0.9719341062  0.9168704156  0.9786780384  0.9230769231  0.9955089820  0.9550898204  0.6870229008  0.6840764331  5.3892215569  5.0572210089  1.4509634972  900           0.2803452110 
0.9646125686  0.8899755501  0.9717484009  0.9273504274  0.9910179641  0.9610778443  0.5731552163  0.5770700637  7.1856287425  5.2143623694  1.4509634972  1200          0.2735240730 
0.9816961562  0.8948655257  0.9802771855  0.9273504274  0.9977544910  0.9640718563  0.6733460560  0.6611464968  8.9820359281  5.0245402042  1.4509634972  1500          0.3059746567 
0.9847467968  0.9193154034  0.9888059701  0.9337606838  0.9985029940  0.9580838323  0.6447201018  0.6382165605  10.778443113  5.0822467629  1.4509634972  1800          0.3166231966 
0.9841366687  0.8875305623  0.9738805970  0.9081196581  0.9970059880  0.9580838323  0.6777989822  0.6636942675  12.574850299  5.0407176960  1.4509634972  2100          0.3122518754 
0.9884075656  0.9193154034  0.9818763326  0.9337606838  0.9970059880  0.9670658683  0.7051526718  0.7108280255  14.371257485  4.9883094565  1.4509634972  2400          0.3167400384 
0.9902379500  0.9242053790  0.9850746269  0.9273504274  0.9992514970  0.9401197605  0.7045165394  0.7146496815  16.167664670  4.9485315228  1.4509634972  2700          0.2790582577 
0.9884075656  0.9046454768  0.9861407249  0.9316239316  0.9970059880  0.9281437126  0.7258269720  0.7452229299  17.964071856  5.0249107679  1.4509634972  3000          0.3187499285 
0.9951189750  0.9266503667  0.9914712154  0.9444444444  0.9992514970  0.9610778443  0.6943384224  0.6980891720  19.760479041  4.9035093156  1.4509634972  3300          0.3193399421 
0.9914582062  0.8924205379  0.9930703625  0.9358974359  0.9962574850  0.9491017964  0.7261450382  0.7171974522  21.556886227  4.9128850091  1.4509634972  3600          0.2907249999 
0.9975594875  0.9070904645  0.9968017058  0.9358974359  0.9985029940  0.9461077844  0.6793893130  0.6777070064  23.353293413  4.9752492579  1.4509634972  3900          0.2916489784 
0.9969493594  0.9290953545  0.9962686567  0.9423076923  0.9970059880  0.9491017964  0.7013358779  0.7019108280  25.149700598  4.8242773430  1.4509634972  4200          0.3126995635 
0.9981696156  0.8997555012  0.9930703625  0.9380341880  1.0000000000  0.9520958084  0.6819338422  0.6866242038  26.946107784  4.8319731736  1.4509634972  4500          0.2891354903 
0.9951189750  0.8973105134  0.9904051173  0.9273504274  0.9977544910  0.9491017964  0.6494910941  0.6369426752  28.742514970  4.8871394571  1.4509634972  4800          0.3022280836 
0.9963392312  0.9022004890  0.9941364606  0.9252136752  1.0000000000  0.9491017964  0.6882951654  0.6853503185  30.538922155  4.8266073493  1.4509634972  5100          0.2964292264 
0.9938987187  0.8973105134  0.9962686567  0.9401709402  0.9992514970  0.9491017964  0.7286895674  0.7464968153  32.335329341  4.7429040825  1.4509634972  5400          0.3148019401 
0.9963392312  0.9144254279  0.9952025586  0.9487179487  0.9962574850  0.9670658683  0.7531806616  0.7605095541  34.131736526  4.8354395350  1.4509634972  5700          0.2946101650 
0.9762050031  0.8850855746  0.9898720682  0.9358974359  0.9962574850  0.9431137725  0.6326335878  0.6471337580  35.928143712  4.8062170887  1.4509634972  6000          0.2819628294 
0.9975594875  0.9022004890  0.9952025586  0.9252136752  0.9992514970  0.9580838323  0.6459923664  0.6522292994  37.724550898  4.9108014441  1.4509634972  6300          0.3072054116 
0.9963392312  0.9070904645  0.9994669510  0.9465811966  0.9992514970  0.9491017964  0.7465012723  0.7503184713  39.520958083  4.7682815087  1.4509634972  6600          0.2731318490 
0.9957291031  0.9339853301  0.9968017058  0.9358974359  0.9970059880  0.9461077844  0.7398218830  0.7579617834  41.317365269  4.8764345598  1.4509634972  6900          0.3066746910 
0.9975594875  0.9339853301  0.9984008529  0.9423076923  1.0000000000  0.9730538922  0.7426844784  0.7401273885  43.113772455  4.7956887666  1.4509634972  7200          0.3075534002 
0.9908480781  0.9119804401  0.9904051173  0.9401709402  0.9992514970  0.9371257485  0.6898854962  0.6751592357  44.910179640  4.8237671808  1.4509634972  7500          0.3061937364 
0.9957291031  0.9144254279  0.9989339019  0.9380341880  0.9992514970  0.9610778443  0.7223282443  0.7044585987  46.706586826  4.8418771537  1.4509634972  7800          0.3024354370 
0.9920683344  0.9022004890  0.9925373134  0.9401709402  0.9985029940  0.9341317365  0.7223282443  0.7197452229  48.502994012  4.7695548785  1.4509634972  8100          0.2943598533 
0.9981696156  0.9266503667  0.9973347548  0.9465811966  0.9992514970  0.9760479042  0.7369592875  0.7133757962  50.299401197  4.9060710390  1.4509634972  8400          0.2668393270 
0.9896278218  0.9095354523  0.9946695096  0.9465811966  0.9947604790  0.9431137725  0.7487277354  0.7439490446  52.095808383  4.8916170470  1.4509634972  8700          0.2958173203 
0.9908480781  0.8728606357  0.9973347548  0.9358974359  0.9985029940  0.9491017964  0.7305979644  0.7299363057  53.892215568  4.7960865402  1.4509634972  9000          0.3133652250 
0.9975594875  0.9022004890  0.9978678038  0.9423076923  0.9992514970  0.9550898204  0.7363231552  0.7286624204  55.688622754  4.7984185874  1.4509634972  9300          0.3384215498 
0.9957291031  0.9217603912  0.9920042644  0.9358974359  0.9985029940  0.9550898204  0.6774809160  0.6777070064  57.485029940  4.8443085786  1.4509634972  9600          0.3489122685 
0.9853569250  0.8679706601  0.9962686567  0.9316239316  0.9985029940  0.9431137725  0.7379134860  0.7337579618  59.281437125  4.7534869250  1.4509634972  9900          0.3528115185 
0.9969493594  0.9119804401  0.9973347548  0.9358974359  0.9977544910  0.9401197605  0.7270992366  0.7324840764  59.874251497  4.7866571588  1.4509634972  9999          0.3685111229 
========== Best Results ==========
0.9981696156  0.9339853301  0.9994669510  0.9487179487  1.0000000000  0.9760479042  0.7531806616  0.7605095541  59.874251497  8.4749317169  1.4509634972  9999          1.9611334801 
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 81, in <module>
    print("\tCUDNN: {}".format(torch.backends.cudnn.version()))
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/backends/cudnn/__init__.py", line 82, in version
    if not _init():
           ^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/backends/cudnn/__init__.py", line 58, in _init
    raise RuntimeError(
RuntimeError: cuDNN version incompatibility: PyTorch was compiled  against (8, 9, 2) but found runtime version (8, 0, 4). PyTorch already comes bundled with cuDNN. One option to resolving this error is to ensure PyTorch can find the bundled cuDNN. Looks like your LD_LIBRARY_PATH contains incompatible version of cudnn. Please either remove it from the path or install cudnn (8, 9, 2)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 239, in <module>
    'step': step,
            ^^^^
NameError: name 'step' is not defined
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 246, in <module>
    acc = misc.accuracy(algorithm, loader, weights, device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 197, in accuracy
    p = network.predict(x)
        ^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x)
           ^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 877, in forward
    return self.forward_hyper(x)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 740, in forward_hyper
    x = self.relu0(x)
        ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/activation.py", line 101, in forward
    return F.relu(input, inplace=self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/functional.py", line 1471, in relu
    result = torch.relu_(input)
             ^^^^^^^^^^^^^^^^^^
RuntimeError: CUDA error: out of memory
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 223, in tsne_collect
    p, feature = network.predictions(x, collect=True)
                 ^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1688, in __getattr__
    raise AttributeError(f"'{type(self).__name__}' object has no attribute '{name}'")
AttributeError: 'M2CL' object has no attribute 'predictions'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 224, in tsne_collect
    features.append(feature.clone().detach(), y)
TypeError: list.append() takes exactly one argument (2 given)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 223, in tsne_collect
    p, _, feature = network.predict(x, collect=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 883, in forward
    return self.forward_hyper(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 739, in forward_hyper
    x = self.bn0(x)
        ^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/batchnorm.py", line 175, in forward
    return F.batch_norm(
           ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/functional.py", line 2482, in batch_norm
    return torch.batch_norm(
           ^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 196.00 MiB. GPU 0 has a total capacity of 10.57 GiB of which 41.75 MiB is free. Process 14259 has 8.65 GiB memory in use. Including non-PyTorch memory, this process has 1.87 GiB memory in use. Of the allocated memory 894.00 MiB is allocated by PyTorch, and 826.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 4
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 4
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 223, in tsne_collect
    p, _, feature = network.predict(x, collect=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 883, in forward
    return self.forward_hyper(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 739, in forward_hyper
    x = self.bn0(x)
        ^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/batchnorm.py", line 175, in forward
    return F.batch_norm(
           ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/functional.py", line 2482, in batch_norm
    return torch.batch_norm(
           ^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 196.00 MiB. GPU 0 has a total capacity of 10.57 GiB of which 41.75 MiB is free. Process 14259 has 8.65 GiB memory in use. Including non-PyTorch memory, this process has 1.87 GiB memory in use. Of the allocated memory 894.00 MiB is allocated by PyTorch, and 826.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 114, in <module>
    if torch.cuda.is_available():
       ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/cuda/__init__.py", line 141, in is_available
    return torch._C._cuda_getDeviceCount() > 0
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 223, in tsne_collect
    p, _, feature = network.predict(x, collect=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 883, in forward
    return self.forward_hyper(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 738, in forward_hyper
    x = self.conv0(x)
        ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/conv.py", line 460, in forward
    return self._conv_forward(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/conv.py", line 456, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 196.00 MiB. GPU 0 has a total capacity of 23.48 GiB of which 61.44 MiB is free. Process 6015 has 792.00 MiB memory in use. Process 40855 has 7.41 GiB memory in use. Process 28876 has 13.75 GiB memory in use. Including non-PyTorch memory, this process has 1.46 GiB memory in use. Of the allocated memory 516.00 MiB is allocated by PyTorch, and 656.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 1
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 1
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 249, in <module>
    feature = misc.tsne_collect(algorithm, loader, weights, device)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 223, in tsne_collect
    p, _, feature = network.predict(x, collect=True)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 883, in forward
    return self.forward_hyper(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 739, in forward_hyper
    x = self.bn0(x)
        ^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/batchnorm.py", line 175, in forward
    return F.batch_norm(
           ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/functional.py", line 2482, in batch_norm
    return torch.batch_norm(
           ^^^^^^^^^^^^^^^^^
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 196.00 MiB. GPU 0 has a total capacity of 10.57 GiB of which 41.75 MiB is free. Process 14259 has 8.65 GiB memory in use. Including non-PyTorch memory, this process has 1.87 GiB memory in use. Of the allocated memory 894.00 MiB is allocated by PyTorch, and 826.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 250, in <module>
    features[name] = feature
    ^^^^^^^^
NameError: name 'features' is not defined. Did you mean: 'feature'?
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 246, in <module>
    acc = misc.accuracy(algorithm, loader, weights, device)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 197, in accuracy
    p = network.predict(x)
        ^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/algorithms.py", line 185, in predict
    return self.network(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 883, in forward
    return self.forward_hyper(x, collect=collect)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/mymodels/m2cl_18.py", line 740, in forward_hyper
    x = self.relu0(x)
        ^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/modules/activation.py", line 101, in forward
    return F.relu(input, inplace=self.inplace)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torch/nn/functional.py", line 1471, in relu
    result = torch.relu_(input)
             ^^^^^^^^^^^^^^^^^^
RuntimeError: CUDA error: out of memory
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
{'env0_in': [(tensor([[ 0.0727,  0.0059, -0.0149,  ..., -0.0176, -0.0565,  0.0591],
        [ 0.1280, -0.0387, -0.0176,  ..., -0.0019, -0.0122,  0.0386],
        [ 0.0391,  0.0717, -0.0519,  ...,  0.0208, -0.0031,  0.0354],
        ...,
        [ 0.0403,  0.0341,  0.0072,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0838, -0.0158,  0.0073,  ...,  0.3290,  0.4609, -0.2687],
        [ 0.0341,  0.0556,  0.0169,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([1, 3, 1, 5, 2, 0, 4, 4, 6, 1, 6, 5, 0, 2, 2, 5, 6, 6, 0, 4, 6, 2, 0, 5,
        6, 0, 4, 6, 4, 6, 6, 5, 2, 5, 5, 0, 6, 4, 5, 0, 2, 0, 4, 1, 1, 3, 2, 2,
        5, 1, 1, 5, 6, 4, 4, 0, 5, 5, 0, 4, 0, 2, 5, 0], device='cuda:0')), (tensor([[ 7.1420e-02,  5.4208e-02,  4.2228e-03,  ...,  1.1745e-02,
         -1.0474e-02,  2.7665e-02],
        [ 7.8883e-02, -3.3560e-02, -7.2387e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 5.6256e-02,  1.3572e-01, -4.1690e-02,  ...,  1.6188e-04,
         -1.6175e-02,  3.6550e-02],
        ...,
        [ 4.2121e-02,  1.1558e-01,  2.2325e-02,  ...,  1.9892e-02,
         -2.7756e-02,  5.2514e-02],
        [ 1.7791e-02, -4.5170e-02, -1.6203e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 3.1572e-02,  5.6169e-02, -1.7448e-02,  ...,  1.0563e+00,
          2.6642e+00, -1.3072e+00]], device='cuda:0'), tensor([4, 0, 0, 6, 6, 6, 1, 0, 6, 2, 6, 5, 1, 3, 6, 3, 5, 0, 3, 0, 1, 2, 5, 0,
        6, 4, 6, 1, 6, 3, 0, 2, 6, 0, 4, 2, 6, 5, 6, 5, 1, 2, 1, 5, 2, 3, 5, 6,
        6, 4, 6, 2, 5, 3, 1, 6, 1, 6, 5, 5, 0, 0, 0, 5], device='cuda:0')), (tensor([[ 0.0059,  0.0294,  0.0286,  ...,  0.0097, -0.0131,  0.0282],
        [ 0.0871,  0.0246, -0.0170,  ..., -0.0042, -0.0044,  0.1241],
        [ 0.0178,  0.1264, -0.0437,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0797,  0.0034, -0.1002,  ...,  0.0853,  0.0015,  0.0790],
        [-0.0047,  0.0054, -0.0476,  ...,  0.0102, -0.0124,  0.0277],
        [ 0.0603,  0.0522, -0.0471,  ...,  0.0048, -0.0159,  0.0297]],
       device='cuda:0'), tensor([1, 6, 0, 6, 6, 0, 0, 0, 2, 6, 4, 0, 3, 2, 0, 6, 4, 4, 6, 5, 3, 0, 2, 1,
        0, 6, 1, 1, 0, 0, 6, 6, 5, 6, 0, 4, 1, 6, 5, 2, 0, 2, 2, 1, 3, 5, 6, 0,
        3, 2, 6, 1, 5, 3, 5, 4, 0, 6, 0, 6, 5, 6, 2, 1], device='cuda:0')), (tensor([[ 0.1121,  0.0630, -0.0137,  ...,  0.0163,  0.4187, -0.1298],
        [ 0.0563,  0.0369,  0.0302,  ..., -0.0120,  1.5359, -1.3057],
        [ 0.0272,  0.0658, -0.0717,  ...,  0.0119, -0.0128,  0.0271],
        ...,
        [ 0.0800,  0.0982,  0.0654,  ...,  0.0128, -0.0137,  0.0251],
        [ 0.0296,  0.0350, -0.0167,  ..., -0.0574,  0.0228,  0.0837],
        [ 0.0149,  0.0354, -0.0174,  ..., -0.0019, -0.0177,  0.0690]],
       device='cuda:0'), tensor([5, 5, 0, 2, 3, 0, 2, 0, 4, 6, 6, 5, 4, 0, 5, 3, 4, 0, 0, 2, 2, 6, 0, 6,
        0, 3, 0, 5, 0, 3, 2, 6, 5, 0, 4, 3, 3, 6, 6, 0, 6, 1, 6, 1, 1, 3, 3, 2,
        1, 3, 5, 3, 2, 2, 0, 6, 5, 0, 1, 6, 6, 2, 6, 6], device='cuda:0')), (tensor([[ 0.0323,  0.0224, -0.0296,  ...,  0.0101, -0.0131,  0.0288],
        [ 0.0268,  0.0383,  0.0212,  ..., -0.2018,  0.0293,  0.2294],
        [ 0.0571,  0.0488, -0.0338,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0226, -0.0212, -0.0610,  ...,  0.0114, -0.0109,  0.0269],
        [ 0.0414,  0.0854, -0.0408,  ..., -0.0300, -0.0278,  0.0651],
        [-0.0296,  0.0248, -0.1152,  ..., -0.0354, -0.0514,  0.0735]],
       device='cuda:0'), tensor([3, 6, 1, 2, 2, 3, 0, 0, 1, 5, 5, 1, 4, 6, 6, 3, 2, 5, 6, 6, 3, 4, 6, 6,
        1, 2, 3, 3, 6, 5, 5, 0, 0, 2, 0, 3, 2, 5, 5, 0, 1, 0, 6, 6, 2, 6, 3, 6,
        4, 3, 1, 2, 6, 0, 2, 1, 4, 0, 5, 0, 0, 0, 6, 1], device='cuda:0')), (tensor([[-0.0414,  0.1020, -0.0327,  ..., -0.0453, -0.0520,  0.0695],
        [ 0.0310,  0.1057, -0.0060,  ...,  0.0063, -0.0194,  0.1000],
        [-0.0108,  0.0547, -0.0417,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0263,  0.0148, -0.0174,  ...,  0.3079,  0.0932, -0.0098],
        [ 0.0560, -0.0051, -0.0129,  ...,  0.7542,  1.1251, -0.3477],
        [ 0.0651,  0.0661, -0.0163,  ...,  0.2149,  1.8688, -0.2479]],
       device='cuda:0'), tensor([0, 4, 2, 1, 6, 2, 6, 4, 3, 4, 2, 4, 5, 0, 1, 3, 3, 3, 6, 1, 2, 5, 0, 6,
        6, 4, 2, 6, 6, 6, 6, 4, 6, 1, 0, 0, 0, 2, 6, 1, 5, 6, 2, 3, 2, 2, 3, 4,
        4, 6, 6, 1, 0, 4, 2, 1, 0, 2, 1, 0, 1, 6, 5, 5], device='cuda:0')), (tensor([[ 0.0360,  0.0769, -0.0599,  ...,  0.0182, -0.0140,  0.0625],
        [ 0.0009,  0.0526, -0.0352,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0352,  0.0401, -0.0329,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0789,  0.0701, -0.0037,  ...,  0.0389,  0.0018,  0.0530],
        [ 0.1059,  0.0264,  0.0712,  ..., -0.0287, -0.0867,  0.0825],
        [ 0.0162,  0.0724, -0.0507,  ...,  0.0198,  0.0133,  0.0726]],
       device='cuda:0'), tensor([6, 2, 4, 0, 6, 6, 2, 5, 5, 4, 5, 6, 0, 5, 5, 0, 1, 0, 0, 5, 4, 0, 5, 5,
        6, 6, 2, 5, 4, 0, 4, 0, 1, 5, 5, 1, 0, 6, 0, 6, 2, 4, 5, 3, 4, 6, 1, 2,
        4, 2, 1, 0, 6, 1, 2, 0, 3, 4, 3, 5, 6, 6, 6, 6], device='cuda:0')), (tensor([[ 0.0061,  0.0172, -0.0050,  ..., -0.0026, -0.0205,  0.0651],
        [ 0.0424,  0.0251, -0.0244,  ...,  0.0027, -0.0367,  0.0529],
        [ 0.0048,  0.0860, -0.0489,  ..., -0.0106, -0.0278,  0.0477],
        ...,
        [ 0.1134, -0.0767,  0.0747,  ...,  0.0078, -0.0157,  0.0362],
        [ 0.1022, -0.0309, -0.0551,  ..., -0.0117, -0.0536,  0.0700],
        [ 0.0493, -0.0237, -0.0620,  ..., -0.0135, -0.0622,  0.1333]],
       device='cuda:0'), tensor([6, 2, 0, 0, 4, 2, 0, 0, 5, 4, 0, 6, 0, 0, 0, 3, 3, 5, 5, 2, 0, 0, 6, 6,
        6, 6, 4, 5, 6, 1, 1, 6, 5, 2, 1, 5, 0, 5, 0, 5, 0, 4, 5, 6, 6, 6, 0, 3,
        0, 4, 5, 5, 0, 6, 6, 3, 6, 0, 0, 5, 0, 3, 0, 3], device='cuda:0')), (tensor([[ 4.1537e-02,  3.5637e-02, -7.7321e-02,  ..., -1.4019e-01,
         -1.1018e-01,  1.1015e-01],
        [ 9.3014e-03,  9.3617e-02, -4.3669e-02,  ..., -7.0784e-03,
         -1.8746e-02,  8.5154e-02],
        [ 7.3086e-03,  9.9317e-02, -3.1065e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 4.2424e-02,  8.3997e-02, -2.1787e-02,  ...,  1.6621e-01,
          2.4108e+00, -1.7529e+00],
        [ 1.3006e-03,  4.5750e-02, -3.0364e-02,  ...,  3.6890e-01,
          1.8538e+00, -1.3334e+00],
        [ 6.2838e-02,  5.8632e-02, -2.6547e-02,  ..., -1.4568e-02,
          2.5234e-02,  7.4362e-02]], device='cuda:0'), tensor([1, 6, 4, 3, 6, 6, 2, 6, 6, 2, 4, 5, 2, 0, 2, 0, 2, 6, 2, 5, 3, 2, 1, 3,
        4, 2, 6, 0, 5, 1, 2, 4, 0, 0, 5, 6, 6, 1, 0, 2, 5, 1, 2, 1, 4, 6, 6, 4,
        6, 1, 0, 6, 2, 0, 5, 2, 6, 5, 5, 6, 2, 5, 5, 6], device='cuda:0')), (tensor([[ 7.6522e-02,  3.2373e-02, -1.4140e-02,  ..., -6.0288e-03,
         -3.3438e-02,  1.2013e-01],
        [ 7.2820e-02,  6.3970e-02, -2.6380e-02,  ..., -4.1714e-02,
         -1.8348e-02,  3.4367e-02],
        [ 6.9801e-02,  2.3298e-02,  5.2953e-02,  ...,  7.4346e-03,
         -8.6033e-03,  6.9969e-02],
        ...,
        [ 5.6243e-02,  3.7621e-02, -8.8912e-02,  ...,  1.6393e+00,
          3.9308e+00, -2.4670e+00],
        [ 4.9445e-02,  6.0579e-02, -9.0286e-03,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 1.4405e-02,  3.8845e-02, -7.1448e-02,  ..., -3.0086e-02,
         -3.5277e-03,  1.2412e-02]], device='cuda:0'), tensor([6, 2, 3, 2, 0, 5, 4, 1, 0, 6, 2, 1, 6, 2, 3, 4, 4, 2, 4, 0, 6, 6, 6, 5,
        5, 0, 6, 1, 6, 0, 2, 1, 0, 6, 5, 0, 0, 3, 0, 1, 5, 4, 3, 0, 0, 6, 4, 2,
        1, 0, 1, 4, 0, 6, 6, 1, 1, 6, 4, 1, 3, 5, 6, 1], device='cuda:0')), (tensor([[ 2.7226e-02,  3.5016e-02, -4.3469e-02,  ...,  9.7388e-03,
         -1.3273e-02,  3.1485e-02],
        [ 2.2138e-02,  4.4338e-02, -3.8323e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-3.1069e-02,  3.7818e-02,  9.1719e-04,  ..., -4.1531e-02,
         -4.8882e-02,  1.2816e-01],
        ...,
        [-1.4612e-03,  1.8344e-02, -4.0996e-02,  ...,  1.4656e+00,
          3.2125e+00, -1.6732e+00],
        [ 5.7028e-02, -7.5325e-03, -4.8466e-02,  ...,  1.0486e-02,
         -1.3493e-02,  2.5773e-02],
        [ 7.3633e-02, -3.2792e-02, -4.1436e-02,  ...,  8.6130e-02,
          5.5023e-02, -5.4023e-02]], device='cuda:0'), tensor([1, 4, 3, 5, 2, 5, 4, 5, 3, 2, 0, 6, 5, 1, 1, 0, 2, 1, 4, 3, 1, 5, 6, 2,
        6, 0, 5, 5, 0, 2, 6, 0, 2, 2, 0, 0, 0, 2, 2, 3, 5, 5, 0, 6, 2, 6, 5, 0,
        6, 2, 3, 6, 6, 5, 1, 2, 5, 3, 5, 3, 0, 5, 0, 6], device='cuda:0')), (tensor([[ 6.1896e-02,  6.3135e-02, -3.8538e-02,  ...,  2.7179e-03,
         -2.0908e-02,  3.5324e-02],
        [-1.2646e-01,  1.7237e-03, -4.3585e-02,  ..., -5.7068e-03,
         -3.6457e-02,  4.7288e-02],
        [ 7.0912e-02, -1.2530e-02, -9.5793e-03,  ...,  4.4836e-02,
          3.7218e-02,  6.0057e-02],
        ...,
        [ 2.2805e-02,  2.7046e-02, -9.0354e-02,  ...,  6.8491e-01,
          2.1682e+00, -1.1230e+00],
        [ 5.0403e-02, -1.9291e-02, -2.9210e-02,  ...,  8.0915e-01,
          1.8023e+00, -1.1893e+00],
        [ 8.1818e-02, -1.6658e-02, -6.5285e-02,  ...,  1.1418e-02,
         -1.0856e-02,  2.6682e-02]], device='cuda:0'), tensor([2, 1, 6, 0, 4, 0, 0, 3, 4, 3, 6, 6, 5, 1, 6, 4, 1, 6, 0, 6, 4, 3, 5, 2,
        3, 0, 1, 2, 5, 5, 3, 0, 5, 4, 3, 4, 5, 0, 3, 4, 5, 6, 6, 3, 2, 1, 5, 0,
        0, 2, 0, 1, 4, 1, 3, 5, 1, 6, 3, 6, 3, 5, 5, 0], device='cuda:0')), (tensor([[ 2.9584e-03, -6.5427e-03, -2.6602e-02,  ...,  9.4591e-03,
         -1.3375e-02,  2.8347e-02],
        [ 4.3949e-02,  3.3584e-02, -3.2822e-02,  ..., -3.9527e-05,
         -1.1979e-02,  8.4247e-02],
        [ 1.5659e-02,  9.8459e-03, -9.7686e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 2.7578e-02,  8.9436e-02, -1.0302e-01,  ...,  3.3337e-03,
         -1.6627e-02,  3.8900e-02],
        [ 3.5122e-02,  1.4507e-01,  2.3017e-02,  ...,  1.0470e-02,
         -1.1997e-02,  2.7268e-02],
        [ 2.2579e-02,  1.7595e-02, -5.4415e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([2, 0, 2, 1, 0, 5, 2, 0, 1, 0, 0, 5, 6, 6, 6, 4, 6, 2, 4, 4, 6, 0, 6, 0,
        6, 5, 3, 0, 1, 2, 6, 1, 4, 6, 6, 2, 6, 1, 6, 1, 0, 0, 5, 5, 5, 0, 6, 2,
        2, 0, 6, 3, 0, 0, 6, 4, 3, 0, 4, 6, 6, 0, 0, 3], device='cuda:0')), (tensor([[ 0.0360,  0.0571, -0.0400,  ..., -0.0116,  0.0192,  0.0305],
        [ 0.0224, -0.0445,  0.0171,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0001,  0.0659, -0.0493,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0514,  0.0272, -0.0124,  ...,  0.0003, -0.0256,  0.0400],
        [ 0.0631,  0.0253,  0.0155,  ...,  0.0084, -0.0139,  0.0268],
        [ 0.0745,  0.0636,  0.0372,  ..., -0.0886, -0.0899,  0.0691]],
       device='cuda:0'), tensor([0, 3, 2, 0, 0, 6, 2, 6, 0, 6, 2, 4, 2, 3, 1, 3, 0, 0, 0, 2, 0, 0, 5, 0,
        4, 1, 4, 6, 4, 4, 0, 2, 6, 1, 0, 0, 3, 5, 0, 4, 0, 6, 6, 5, 0, 3, 1, 0,
        4, 3, 2, 4, 6, 6, 6, 2, 2, 6, 6, 3, 5, 2, 2, 4], device='cuda:0')), (tensor([[ 6.8502e-02,  6.0505e-03, -5.8301e-02,  ..., -2.5830e-03,
         -3.0575e-02,  6.8971e-02],
        [ 1.9647e-02,  3.2883e-02, -3.7426e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 4.7757e-02, -3.1615e-04, -1.9820e-02,  ..., -2.9003e-02,
         -7.2675e-03,  6.8798e-02],
        ...,
        [ 4.9760e-02,  3.7774e-02, -2.0070e-02,  ...,  6.0586e-01,
          1.3466e+00, -5.6434e-01],
        [ 6.7707e-02,  2.0392e-02, -3.8539e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 3.7818e-02,  6.3299e-02, -1.8491e-02,  ..., -7.8599e-03,
         -3.9552e-02,  5.7943e-02]], device='cuda:0'), tensor([3, 0, 1, 3, 5, 2, 3, 2, 4, 1, 0, 0, 0, 5, 0, 6, 0, 5, 3, 4, 6, 6, 3, 6,
        0, 6, 4, 6, 3, 4, 6, 1, 5, 4, 2, 0, 1, 1, 6, 2, 0, 1, 0, 3, 6, 2, 0, 4,
        3, 6, 1, 1, 2, 6, 6, 3, 5, 2, 0, 6, 3, 5, 6, 2], device='cuda:0')), (tensor([[ 0.0560,  0.0781, -0.0302,  ...,  0.8655,  2.3680, -1.5901],
        [ 0.0529,  0.0549,  0.0028,  ...,  0.0264, -0.0310,  0.0477],
        [-0.0151,  0.0710, -0.0158,  ..., -0.0328, -0.0407,  0.1565],
        ...,
        [ 0.0380,  0.0356, -0.0054,  ..., -0.0573, -0.1062,  0.1612],
        [ 0.0504,  0.0276, -0.0183,  ..., -0.0068, -0.0198,  0.0493],
        [ 0.1048,  0.1142,  0.0246,  ..., -0.0148, -0.0147,  0.0450]],
       device='cuda:0'), tensor([5, 6, 2, 4, 5, 1, 0, 1, 0, 6, 5, 0, 4, 6, 2, 3, 4, 0, 6, 3, 5, 3, 0, 6,
        4, 2, 2, 6, 6, 0, 6, 6, 6, 0, 1, 5, 6, 6, 1, 1, 4, 3, 6, 6, 0, 4, 1, 6,
        5, 1, 4, 4, 6, 0, 4, 2, 2, 2, 5, 4, 5, 6, 1, 0], device='cuda:0')), (tensor([[ 0.0492,  0.0517, -0.0489,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0062, -0.0217, -0.0066,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0734,  0.0394, -0.0327,  ..., -0.0828, -0.0074,  0.1104],
        ...,
        [ 0.0828,  0.0639,  0.0063,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0368,  0.0368, -0.0403,  ...,  0.0217, -0.0356,  0.0639],
        [ 0.0592,  0.0786, -0.0498,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([0, 6, 6, 1, 0, 6, 5, 6, 2, 5, 4, 0, 4, 5, 6, 5, 2, 1, 1, 4, 3, 5, 5, 2,
        0, 5, 6, 3, 6, 5, 2, 2, 0, 0, 1, 5, 0, 2, 6, 4, 4, 4, 5, 6, 4, 0, 5, 0,
        3, 0, 1, 2, 3, 6, 5, 1, 6, 6, 0, 6, 6, 2, 6, 3], device='cuda:0')), (tensor([[ 0.0455,  0.0869, -0.0191,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0524,  0.0375, -0.0472,  ...,  0.0097, -0.0131,  0.0282],
        [-0.0303,  0.0391, -0.0680,  ..., -0.0855,  0.0160,  0.1078],
        ...,
        [-0.0209,  0.0318, -0.0566,  ...,  0.0157, -0.0156,  0.0284],
        [ 0.0451,  0.0512, -0.0502,  ..., -0.4038, -0.1484,  0.0833],
        [ 0.0876, -0.0123, -0.0302,  ...,  0.0403,  0.0097,  0.1266]],
       device='cuda:0'), tensor([0, 0, 1, 3, 5, 2, 0, 5, 4, 1, 2, 0, 3, 6, 0, 6, 2, 5, 5, 1, 0, 4, 0, 5,
        4, 5, 4, 5, 6, 6, 0, 1, 5, 2, 5, 0, 1, 0, 5, 0, 1, 5, 5, 6, 6, 2, 3, 0,
        6, 6, 4, 0, 1, 4, 2, 6, 5, 0, 6, 4, 5, 3, 2, 6], device='cuda:0')), (tensor([[ 0.0118,  0.0538, -0.0054,  ..., -0.0488, -0.0663,  0.0842],
        [ 0.0131,  0.0566, -0.0521,  ..., -0.0135, -0.0246,  0.0436],
        [ 0.0642,  0.0519, -0.0078,  ..., -0.0151, -0.0196,  0.0568],
        ...,
        [ 0.0072,  0.0194, -0.0274,  ..., -0.0428, -0.0808,  0.1447],
        [ 0.0473,  0.0726,  0.0064,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0283,  0.0411, -0.0553,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([6, 4, 6, 5, 5, 1, 6, 5, 5, 6, 5, 0, 2, 1, 6, 6, 0, 6, 0, 6, 0, 4, 6, 2,
        6, 6, 5, 6, 1, 0, 6, 6, 3, 0, 6, 3, 3, 5, 6, 5, 6, 3, 6, 2, 2, 2, 2, 2,
        6, 6, 1, 5, 6, 1, 1, 2, 0, 0, 0, 4, 1, 1, 4, 3], device='cuda:0')), (tensor([[ 9.6909e-03,  7.5009e-02, -3.8314e-02,  ...,  1.0455e-02,
         -1.2094e-02,  2.7502e-02],
        [ 5.7922e-02, -1.1691e-03, -2.9972e-02,  ...,  1.5313e-02,
         -1.4974e-02,  2.7462e-02],
        [ 8.8512e-02,  6.2038e-02,  4.4530e-03,  ...,  5.4159e-01,
          3.0234e+00, -1.5320e+00],
        ...,
        [ 3.0497e-02, -2.4163e-02, -8.9936e-02,  ..., -3.3223e-02,
         -6.5928e-02,  1.1117e-01],
        [ 7.0168e-02,  3.1121e-02,  2.6040e-03,  ...,  3.3523e-02,
         -5.0291e-02,  4.5350e-02],
        [ 2.3674e-02,  5.9370e-04, -1.8490e-02,  ...,  9.8019e-03,
         -3.7135e-02,  6.9870e-02]], device='cuda:0'), tensor([0, 3, 5, 6, 6, 3, 5, 3, 0, 0, 0, 0, 0, 2, 0, 6, 2, 2, 6, 5, 2, 5, 6, 6,
        1, 5, 5, 2, 1, 6, 6, 5, 4, 6, 1, 5, 4, 3, 2, 2, 2, 6, 2, 1, 0, 6, 6, 2,
        6, 4, 5, 6, 4, 1, 6, 6, 6, 6, 5, 0, 0, 0, 1, 4], device='cuda:0')), (tensor([[ 0.0191, -0.0168, -0.0399,  ..., -0.0026, -0.0274,  0.0292],
        [ 0.0392,  0.1080,  0.0071,  ..., -0.0343, -0.0715,  0.0695],
        [-0.0244,  0.0881, -0.0445,  ...,  0.0043, -0.0254,  0.0461],
        ...,
        [ 0.1209,  0.0426,  0.0241,  ..., -0.1176,  0.0431,  0.1120],
        [-0.0044,  0.0539, -0.0344,  ...,  0.2361,  1.1187, -0.4424],
        [ 0.1235,  0.0110, -0.0156,  ...,  0.0052, -0.0030,  0.0311]],
       device='cuda:0'), tensor([0, 4, 0, 3, 2, 5, 0, 6, 6, 5, 6, 0, 6, 0, 1, 2, 5, 2, 3, 5, 4, 0, 1, 0,
        1, 3, 6, 1, 2, 2, 4, 5, 2, 5, 0, 2, 5, 2, 6, 4, 5, 5, 2, 1, 2, 2, 0, 6,
        6, 0, 2, 1, 6, 1, 6, 0, 0, 6, 0, 1, 5, 0, 5, 2], device='cuda:0')), (tensor([[-2.0086e-02,  3.2049e-02,  1.2892e-02,  ...,  8.5223e-01,
          2.4547e+00, -9.8532e-01],
        [ 5.4362e-02,  4.0260e-02,  3.8860e-02,  ..., -5.7177e-02,
         -9.1377e-03,  5.2036e-02],
        [ 3.6842e-02,  3.0897e-02, -1.7584e-02,  ..., -1.7678e-03,
          7.4051e-03,  2.3274e-02],
        ...,
        [ 4.0549e-02,  3.6771e-03,  2.0403e-02,  ...,  3.0591e-03,
         -1.0736e-02,  2.7511e-02],
        [-5.3124e-03,  4.9744e-02, -2.5509e-02,  ..., -8.3817e-02,
         -1.6204e-01,  1.0879e-01],
        [ 2.8976e-02,  5.1526e-02, -5.1160e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([5, 3, 0, 5, 2, 2, 0, 3, 5, 2, 4, 5, 6, 5, 2, 6, 5, 6, 6, 6, 1, 2, 6, 5,
        6, 5, 4, 1, 0, 2, 5, 1, 6, 2, 5, 6, 1, 0, 5, 6, 1, 6, 6, 0, 6, 0, 2, 6,
        2, 5, 0, 0, 6, 0, 6, 6, 6, 3, 0, 0, 4, 6, 1, 6], device='cuda:0')), (tensor([[ 0.0297,  0.0211, -0.0717,  ...,  0.0080, -0.0116,  0.0288],
        [ 0.0270, -0.0093, -0.0349,  ...,  1.7779,  2.3655, -1.3097],
        [ 0.0372,  0.0032, -0.0211,  ...,  0.0116, -0.0141,  0.0275],
        ...,
        [ 0.0628,  0.0689, -0.0132,  ...,  0.0113, -0.0099,  0.0267],
        [-0.0027,  0.0877, -0.0263,  ..., -0.0530, -0.0305,  0.0376],
        [ 0.0512,  0.0451, -0.0380,  ...,  0.0117, -0.0152,  0.0277]],
       device='cuda:0'), tensor([4, 5, 2, 2, 3, 6, 0, 1, 1, 6, 4, 0, 6, 2, 4, 5, 0, 5, 3, 2, 6, 5, 1, 4,
        4, 2, 1, 5, 0, 2, 2, 2, 2, 1, 2, 6, 5, 0, 2, 6, 0, 6, 3, 6, 0, 4, 5, 5,
        3, 3, 6, 3, 2, 5, 4, 6, 1, 6, 2, 2, 2, 0, 4, 6], device='cuda:0')), (tensor([[-3.1945e-02,  3.8547e-02, -1.3625e-02,  ...,  7.8206e-01,
          2.8213e+00, -2.0806e+00],
        [ 4.9206e-02, -1.9676e-02, -5.2555e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 5.3145e-02,  8.5400e-02, -4.7731e-02,  ..., -5.9949e-03,
         -2.8140e-02,  5.4709e-02],
        ...,
        [ 5.6868e-02,  2.4043e-02, -3.2480e-03,  ..., -8.0043e-02,
         -1.1309e-01,  2.0732e-01],
        [ 5.1311e-02,  1.2935e-01, -1.1850e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 3.4895e-02,  2.2704e-02,  1.0818e-03,  ...,  8.4073e-01,
          2.4574e+00, -9.6580e-01]], device='cuda:0'), tensor([5, 0, 1, 3, 2, 6, 3, 4, 5, 2, 1, 0, 1, 0, 1, 0, 2, 6, 0, 4, 3, 6, 1, 1,
        6, 6, 6, 0, 3, 6, 5, 6, 0, 6, 1, 6, 5, 4, 0, 1, 1, 2, 5, 2, 3, 4, 2, 1,
        6, 5, 5, 2, 6, 0, 1, 6, 4, 3, 2, 5, 0, 2, 2, 5], device='cuda:0')), (tensor([[ 1.3738e-02,  1.1610e-01, -8.5206e-02,  ...,  7.1036e-03,
         -4.6866e-02,  5.9200e-02],
        [-9.9003e-03, -6.1863e-03, -7.4683e-02,  ...,  6.9357e-01,
          1.3275e+00, -4.7977e-01],
        [ 4.2406e-02,  5.3286e-02, -3.7753e-02,  ...,  1.1257e-02,
         -1.1062e-02,  2.6819e-02],
        ...,
        [ 6.3174e-02, -8.3176e-04, -4.5153e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 1.5545e-02,  4.8160e-02, -2.0565e-02,  ..., -7.8043e-02,
         -1.6259e-02,  1.2718e-01],
        [ 5.9397e-02,  3.6206e-02, -4.3812e-02,  ...,  6.2002e-03,
         -2.1616e-02,  4.2342e-02]], device='cuda:0'), tensor([4, 5, 2, 4, 1, 6, 6, 6, 0, 3, 1, 4, 1, 5, 3, 1, 0, 6, 6, 2, 5, 6, 0, 1,
        4, 6, 4, 6, 0, 2, 0, 4, 1, 2, 1, 0, 3, 5, 3, 0, 3, 1, 2, 6, 6, 0, 6, 4,
        4, 3, 1, 0, 3, 6, 2, 4, 3, 6, 5, 1, 0, 3, 2, 0], device='cuda:0')), (tensor([[ 8.5672e-02,  2.4414e-02, -1.6883e-02,  ..., -1.5534e-02,
         -2.4465e-02,  1.8890e-02],
        [ 3.8818e-02, -3.2151e-02, -3.7192e-03,  ..., -4.1600e-03,
         -1.6357e-02,  2.4309e-02],
        [ 1.5985e-02,  4.2816e-02, -3.4313e-03,  ..., -4.1361e-02,
          1.5685e-03,  5.2533e-02],
        ...,
        [-3.7605e-02,  3.0717e-02, -8.2377e-02,  ...,  2.6216e+00,
          4.1100e+00, -1.2567e+00],
        [ 3.9018e-02,  6.3918e-02, -4.9118e-02,  ..., -1.0082e-01,
         -7.3243e-02,  6.6269e-02],
        [ 6.3197e-02,  3.7248e-02, -1.1091e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([6, 1, 3, 5, 4, 0, 1, 5, 2, 2, 2, 3, 1, 6, 6, 6, 3, 4, 4, 5, 5, 1, 1, 1,
        5, 4, 6, 1, 0, 1, 6, 6, 0, 5, 5, 2, 5, 1, 2], device='cuda:0'))], 'env1_in': [(tensor([[-0.0697,  0.0233,  0.0051,  ...,  0.0004, -0.0301,  0.0530],
        [-0.0230, -0.0251, -0.0197,  ..., -0.0031, -0.0349,  0.0655],
        [ 0.0340,  0.0089, -0.0488,  ...,  0.0119,  0.0289, -0.0263],
        ...,
        [ 0.0004,  0.0405, -0.0322,  ...,  0.0013, -0.0171,  0.0335],
        [ 0.1254, -0.1752,  0.0006,  ...,  0.0068, -0.0249,  0.0254],
        [ 0.0838,  0.0388, -0.0043,  ..., -0.0034, -0.0193,  0.0226]],
       device='cuda:0'), tensor([3, 4, 1, 2, 3, 6, 4, 4, 6, 4, 1, 1, 0, 6, 6, 4, 0, 2, 3, 2, 6, 6, 4, 4,
        2, 2, 4, 2, 1, 3, 4, 2, 2, 4, 0, 2, 0, 6, 0, 5, 6, 5, 2, 0, 0, 4, 5, 5,
        6, 6, 3, 5, 3, 1, 2, 0, 2, 2, 4, 6, 6, 2, 6, 6], device='cuda:0')), (tensor([[-0.0790,  0.1036,  0.0400,  ..., -0.0073,  0.0552,  0.2066],
        [ 0.0818,  0.0474,  0.0082,  ...,  0.1171,  0.0064,  0.1073],
        [ 0.0202,  0.0735,  0.0054,  ...,  0.0061, -0.0277,  0.0472],
        ...,
        [ 0.0748,  0.0298, -0.0720,  ...,  0.1179,  0.0313,  0.0048],
        [-0.1553,  0.2541, -0.0551,  ..., -0.0012, -0.0058,  0.0623],
        [ 0.1003,  0.1568, -0.0543,  ..., -0.0275, -0.0510,  0.0727]],
       device='cuda:0'), tensor([1, 1, 6, 2, 5, 0, 4, 1, 2, 4, 2, 2, 0, 3, 0, 1, 1, 2, 2, 2, 0, 5, 6, 1,
        4, 1, 4, 6, 5, 6, 5, 6, 2, 5, 5, 5, 6, 0, 1, 6, 1, 4, 3, 5, 5, 1, 6, 0,
        1, 6, 1, 6, 2, 1, 1, 4, 0, 1, 1, 2, 0, 6, 0, 0], device='cuda:0')), (tensor([[-0.0277,  0.0701,  0.0121,  ...,  0.0054, -0.0187,  0.0318],
        [-0.0051,  0.0291,  0.0217,  ...,  0.0079, -0.0153,  0.0298],
        [ 0.0437,  0.0504, -0.0010,  ..., -0.3328, -0.2263,  0.5608],
        ...,
        [ 0.0102,  0.0228, -0.0199,  ..., -0.0380, -0.0150,  0.0812],
        [ 0.0202,  0.0499, -0.0225,  ...,  0.0114, -0.0109,  0.0267],
        [ 0.0468,  0.0325, -0.0257,  ...,  0.0084, -0.0148,  0.0293]],
       device='cuda:0'), tensor([2, 2, 6, 3, 1, 2, 0, 0, 6, 2, 4, 4, 0, 5, 6, 6, 6, 6, 4, 5, 4, 0, 1, 2,
        6, 2, 5, 0, 2, 6, 5, 0, 6, 0, 2, 2, 3, 5, 6, 0, 4, 2, 1, 4, 6, 5, 3, 6,
        1, 6, 4, 0, 1, 4, 5, 1, 6, 2, 5, 4, 3, 0, 2, 2], device='cuda:0')), (tensor([[ 2.4056e-02,  6.8271e-02,  3.5160e-02,  ...,  1.0456e-02,
         -1.2092e-02,  2.7500e-02],
        [-1.0061e-03,  4.6784e-02, -1.4355e-02,  ...,  1.1941e+00,
          2.8524e+00, -1.3339e+00],
        [ 7.5911e-02,  4.3390e-02,  6.5383e-03,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 1.0086e-01, -1.5935e-02, -1.1528e-01,  ...,  9.8316e-03,
          3.1097e-02, -1.1346e-02],
        [-8.0859e-03, -1.4614e-02, -8.6870e-02,  ...,  1.3767e-02,
         -4.4514e-02,  3.9197e-02],
        [ 6.2373e-03,  3.0402e-02, -9.3193e-02,  ...,  1.3662e+00,
          3.0363e+00, -1.3671e+00]], device='cuda:0'), tensor([4, 5, 1, 2, 4, 1, 6, 6, 2, 2, 0, 5, 1, 0, 6, 0, 3, 0, 5, 2, 0, 5, 1, 6,
        4, 5, 1, 6, 1, 2, 6, 1, 5, 0, 3, 2, 2, 4, 1, 1, 6, 0, 0, 0, 4, 6, 4, 2,
        3, 4, 6, 2, 1, 1, 2, 6, 1, 0, 4, 0, 1, 1, 1, 5], device='cuda:0')), (tensor([[-2.0700e-03,  7.0985e-02,  1.9745e-02,  ...,  9.6317e-02,
          2.9623e+00, -1.9778e+00],
        [ 1.3536e-02,  4.7497e-02, -1.6061e-02,  ...,  3.8286e-03,
         -2.2689e-02,  3.3514e-02],
        [ 7.8941e-02,  4.8903e-02, -1.8201e-02,  ..., -2.4867e-02,
         -4.3245e-02,  6.3127e-02],
        ...,
        [ 1.1218e-03,  2.6829e-02, -7.2693e-03,  ...,  2.8335e+00,
          4.0846e+00, -2.8215e+00],
        [ 5.0166e-02,  9.5286e-02,  6.3454e-02,  ...,  2.4146e-02,
         -5.4414e-03,  5.4516e-02],
        [-9.4391e-04, -1.0213e-01, -6.5227e-02,  ...,  7.5507e-03,
         -1.1816e-02,  2.3466e-02]], device='cuda:0'), tensor([5, 1, 0, 0, 4, 6, 4, 4, 0, 0, 3, 2, 1, 3, 1, 5, 6, 0, 0, 4, 2, 4, 4, 0,
        0, 6, 6, 5, 3, 5, 0, 2, 1, 6, 5, 2, 5, 5, 5, 5, 1, 0, 4, 1, 6, 4, 0, 5,
        6, 0, 6, 0, 2, 6, 0, 1, 3, 6, 1, 0, 4, 5, 6, 1], device='cuda:0')), (tensor([[ 0.0465,  0.0318,  0.0250,  ...,  0.0103, -0.0185,  0.0431],
        [ 0.0244,  0.0466, -0.0210,  ...,  0.0337,  0.1259, -0.1119],
        [ 0.0626, -0.0254, -0.0389,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0041,  0.0790, -0.0741,  ...,  0.0128, -0.0203,  0.0339],
        [ 0.0448,  0.0234, -0.0559,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.1306, -0.0047,  0.0416,  ..., -0.0201,  0.1502, -0.0488]],
       device='cuda:0'), tensor([0, 3, 6, 5, 4, 6, 2, 6, 1, 6, 0, 6, 5, 5, 6, 6, 6, 4, 4, 2, 5, 1, 0, 1,
        2, 1, 0, 3, 6, 2, 6, 5, 2, 5, 1, 6, 6, 1, 2, 6, 2, 1, 2, 2, 4, 1, 4, 1,
        2, 6, 6, 0, 1, 4, 1, 4, 5, 2, 6, 5, 4, 4, 2, 6], device='cuda:0')), (tensor([[ 5.0053e-03,  1.4919e-03,  1.0442e-02,  ...,  1.0094e+00,
          2.0242e+00, -1.1642e+00],
        [ 9.8078e-03,  3.3460e-02, -7.8033e-03,  ...,  6.7394e-03,
         -1.4123e-02,  3.8855e-02],
        [-3.3078e-02,  8.7156e-03,  2.0389e-02,  ...,  6.3670e-01,
          3.3315e+00, -1.9679e+00],
        ...,
        [ 3.7104e-02,  3.7907e-03, -2.7450e-02,  ..., -9.0780e-02,
         -5.5989e-02,  9.0867e-02],
        [-1.5949e-03,  4.3374e-02, -6.8934e-02,  ..., -4.7057e-03,
         -4.6618e-02,  6.8597e-02],
        [-6.0016e-03,  1.5399e-02, -4.5748e-02,  ...,  4.3503e-02,
          6.2003e-02,  4.2171e-02]], device='cuda:0'), tensor([5, 3, 5, 0, 4, 0, 4, 3, 1, 5, 6, 2, 5, 1, 6, 4, 0, 5, 2, 5, 5, 4, 1, 6,
        6, 1, 4, 3, 2, 0, 1, 4, 4, 3, 3, 6, 0, 6, 2, 2, 0, 0, 1, 6, 1, 6, 2, 0,
        1, 6, 1, 0, 0, 0, 0, 5, 4, 4, 6, 4, 4, 2, 2, 0], device='cuda:0')), (tensor([[-0.0141, -0.0298,  0.0218,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0592,  0.1100, -0.0179,  ...,  0.0011, -0.0396,  0.0563],
        [ 0.0096, -0.0121,  0.0033,  ...,  0.0093, -0.0107,  0.0247],
        ...,
        [-0.0290,  0.0299, -0.0924,  ..., -0.0092, -0.0403,  0.0708],
        [ 0.0329,  0.0768,  0.0019,  ...,  0.1638,  0.1382, -0.0567],
        [ 0.0018,  0.0436, -0.0038,  ..., -0.0237, -0.0699,  0.0652]],
       device='cuda:0'), tensor([4, 1, 0, 1, 6, 2, 6, 6, 5, 5, 5, 0, 0, 4, 6, 1, 5, 1, 2, 6, 0, 3, 6, 0,
        1, 1, 0, 3, 2, 5, 2, 1, 4, 5, 6, 2, 5, 0, 1, 5, 1, 1, 0, 3, 1, 5, 5, 4,
        1, 5, 5, 1, 5, 2, 4, 6, 1, 4, 1, 6, 3, 0, 6, 1], device='cuda:0')), (tensor([[-0.0131,  0.1078, -0.0280,  ..., -0.0013, -0.0219,  0.0307],
        [ 0.0388,  0.0349,  0.0135,  ...,  0.0028, -0.0228,  0.0368],
        [ 0.0430,  0.0343, -0.0306,  ..., -0.1191, -0.1772,  0.1319],
        ...,
        [ 0.1416, -0.0026, -0.0015,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.1895,  0.0415,  0.1005,  ...,  0.0079, -0.0234,  0.0345],
        [ 0.0008,  0.0592, -0.1181,  ...,  0.0100, -0.0242,  0.0402]],
       device='cuda:0'), tensor([0, 2, 2, 0, 0, 0, 2, 6, 5, 2, 1, 1, 2, 5, 6, 6, 5, 6, 6, 5, 3, 3, 4, 5,
        4, 5, 2, 1, 6, 4, 5, 0, 6, 4, 2, 3, 2, 4, 2, 2, 6, 3, 4, 1, 4, 1, 6, 2,
        1, 1, 1, 3, 4, 6, 6, 2, 2, 2, 0, 6, 4, 4, 1, 4], device='cuda:0')), (tensor([[ 0.0102, -0.0533, -0.0243,  ...,  1.2870,  4.0037, -1.2953],
        [ 0.1068, -0.1514,  0.0704,  ...,  0.0084, -0.0173,  0.0373],
        [-0.1174,  0.0700, -0.0768,  ...,  0.0066, -0.0168,  0.0343],
        ...,
        [-0.0050,  0.0480, -0.0287,  ...,  0.0095, -0.0251,  0.0364],
        [-0.0162,  0.0698, -0.0621,  ..., -0.0302,  0.1085, -0.0534],
        [ 0.0523,  0.0305, -0.0082,  ...,  0.0053, -0.0176,  0.0282]],
       device='cuda:0'), tensor([5, 2, 4, 6, 4, 1, 6, 2, 6, 0, 4, 0, 4, 0, 5, 4, 6, 1, 1, 6, 5, 6, 6, 0,
        6, 2, 1, 0, 4, 4, 0, 6, 1, 1, 5, 6, 3, 6, 2, 3, 6, 5, 2, 0, 6, 3, 3, 0,
        1, 4, 2, 6, 5, 4, 1, 0, 4, 5, 4, 0, 5, 2, 6, 1], device='cuda:0')), (tensor([[ 0.0726, -0.0110, -0.0184,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.1055,  0.0991, -0.0852,  ...,  0.0051, -0.0461,  0.0464],
        [-0.0115, -0.0138, -0.0474,  ...,  0.1628,  0.0520,  0.0418],
        ...,
        [ 0.0123,  0.0110, -0.0876,  ..., -0.0019, -0.0272,  0.0390],
        [ 0.0716,  0.0272, -0.0177,  ...,  0.0096, -0.0163,  0.0255],
        [ 0.0555,  0.0279, -0.0830,  ...,  0.0072, -0.0163,  0.0302]],
       device='cuda:0'), tensor([4, 1, 6, 0, 6, 1, 2, 3, 1, 3, 2, 4, 0, 4, 4, 4, 0, 2, 1, 6, 4, 0, 6, 2,
        1, 5, 5, 1, 6, 2, 5, 0, 4, 2, 0, 5, 3, 0, 6, 6, 0, 5, 2, 6, 1, 3, 0, 4,
        1, 4, 4, 1, 4, 3, 0, 3, 2, 1, 4, 2, 1, 3, 0, 4], device='cuda:0')), (tensor([[ 0.0318,  0.0127, -0.0090,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0017,  0.0116,  0.0018,  ..., -0.0800, -0.1507,  0.0948],
        [ 0.0604,  0.1309, -0.0661,  ...,  0.0568,  0.0323, -0.0435],
        ...,
        [ 0.0269,  0.0228, -0.0438,  ..., -0.0037, -0.0170,  0.0580],
        [-0.0697,  0.1008, -0.0705,  ..., -0.0457, -0.0650,  0.0603],
        [-0.0217,  0.0531, -0.0300,  ...,  0.1772,  0.3445, -0.1548]],
       device='cuda:0'), tensor([1, 4, 0, 0, 2, 4, 6, 2, 4, 6, 0, 4, 4, 6, 5, 4, 0, 5, 5, 0, 1, 1, 6, 0,
        6, 5, 4, 2, 0, 1, 1, 5, 2, 5, 6, 6, 1, 2, 4, 2, 2, 2, 3, 1, 4, 1, 5, 0,
        1, 0, 2, 4, 0, 1, 4, 0, 4, 0, 6, 4, 5, 2, 0, 1], device='cuda:0')), (tensor([[ 6.0107e-02,  1.4586e-01, -6.8151e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 3.5902e-03, -1.1500e-03, -2.1317e-02,  ...,  1.1806e+00,
          5.3403e+00, -2.7691e+00],
        [ 2.0802e-02,  1.1364e-01,  4.0066e-03,  ..., -9.6132e-03,
         -1.6876e-02,  3.8566e-02],
        ...,
        [ 2.3480e-02,  6.4990e-02, -5.7092e-02,  ...,  7.8259e-03,
         -1.5373e-02,  2.9794e-02],
        [-7.4621e-03,  1.0063e-02, -3.2383e-02,  ...,  1.0413e-01,
          8.6909e-02, -6.9656e-02],
        [ 3.6747e-02, -6.2028e-03, -1.2653e-02,  ..., -3.5560e-02,
         -5.1218e-02,  7.2780e-02]], device='cuda:0'), tensor([1, 5, 0, 5, 6, 2, 3, 1, 1, 2, 1, 6, 3, 5, 1, 1, 5, 3, 1, 0, 4, 1, 5, 6,
        0, 0, 1, 1, 1, 2, 4, 2, 6, 5, 0, 0, 2, 1, 0, 0, 3, 0, 6, 6, 6, 1, 3, 5,
        1, 1, 0, 0, 4, 1, 1, 6, 0, 5, 4, 6, 4, 2, 6, 2], device='cuda:0')), (tensor([[ 0.0392,  0.0190, -0.0710,  ...,  0.0226, -0.0091,  0.0337],
        [ 0.0231, -0.0103, -0.0195,  ..., -0.0034, -0.0194,  0.0362],
        [ 0.1144,  0.0425,  0.0112,  ..., -0.0548, -0.0759,  0.0622],
        ...,
        [ 0.0302,  0.0136,  0.0268,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0133,  0.0232, -0.0116,  ...,  0.0069, -0.0167,  0.0305],
        [ 0.0495,  0.0230, -0.0369,  ...,  0.4268,  2.6523, -0.7361]],
       device='cuda:0'), tensor([2, 3, 0, 3, 0, 2, 1, 5, 1, 2, 0, 5, 0, 0, 2, 1, 0, 4, 4, 1, 2, 6, 6, 0,
        1, 0, 4, 3, 1, 2, 0, 0, 0, 1, 5, 0, 1, 0, 3, 6, 2, 4, 1, 2, 5, 5, 0, 1,
        5, 0, 6, 2, 0, 1, 4, 6, 6, 2, 2, 0, 0, 6, 2, 5], device='cuda:0')), (tensor([[ 6.0285e-02,  3.5567e-02, -1.2645e-02,  ...,  3.6777e-02,
         -8.5928e-03,  6.9893e-02],
        [-1.6219e-03,  5.8745e-02, -9.3759e-03,  ..., -5.6048e-03,
         -2.1019e-02,  4.2773e-02],
        [ 2.8831e-02,  1.5739e-02, -4.6716e-02,  ...,  2.5065e+00,
          1.8704e+00, -8.6218e-01],
        ...,
        [ 2.4313e-03,  7.1784e-02, -8.8194e-03,  ...,  8.7362e-03,
         -2.8519e-02,  3.7787e-02],
        [-6.1122e-03,  4.7544e-02,  1.4310e-02,  ...,  1.3436e-01,
          4.8057e-02, -6.9570e-02],
        [ 6.3235e-02,  1.2721e-02,  5.4244e-02,  ..., -2.4927e-02,
          9.6187e-03,  3.7363e-03]], device='cuda:0'), tensor([0, 1, 5, 0, 2, 1, 1, 6, 3, 1, 5, 3, 3, 4, 4, 6, 5, 3, 4, 0, 5, 0, 1, 2,
        6, 4, 5, 0, 0, 5, 6, 1, 4, 5, 6, 2, 0, 4, 0, 6, 1, 5, 3, 1, 6, 5, 0, 2,
        0, 0, 1, 1, 4, 2, 6, 2, 0, 0, 6, 1, 1, 3, 6, 0], device='cuda:0')), (tensor([[ 0.0500,  0.0246, -0.0642,  ..., -0.0033, -0.0156,  0.0417],
        [ 0.0358,  0.0596, -0.0143,  ..., -0.0577, -0.1541,  0.1015],
        [ 0.0048,  0.0436, -0.0315,  ...,  0.0029, -0.0032,  0.0661],
        ...,
        [ 0.0593,  0.0220, -0.0647,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0291, -0.0158, -0.0221,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0238,  0.0928, -0.0229,  ..., -0.1555,  0.1175,  0.3239]],
       device='cuda:0'), tensor([2, 1, 4, 1, 1, 4, 3, 5, 1, 6, 6, 2, 6, 5, 2, 2, 0, 0, 0, 1, 1, 5, 2, 4,
        1, 0, 6, 5, 4, 2, 1, 3, 6, 4, 4, 4, 0, 6, 1, 1, 6, 4, 2, 2, 1, 0, 6, 4,
        0, 6, 2, 6, 0, 2, 3, 5, 6, 1, 1, 2, 6, 2, 6, 6], device='cuda:0')), (tensor([[-6.9766e-02, -1.6686e-02, -6.2044e-02,  ...,  1.1840e+00,
          2.9745e+00, -1.4841e+00],
        [-2.3351e-03,  4.5946e-03, -6.1328e-02,  ..., -7.6729e-02,
         -4.1450e-02,  5.7812e-02],
        [ 7.1565e-02,  1.0639e-02, -1.4397e-02,  ..., -2.3284e-03,
         -2.5598e-02,  5.5940e-02],
        ...,
        [-2.8646e-02,  8.2104e-02, -1.0854e-01,  ...,  7.9299e-03,
         -1.6524e-02,  3.7110e-02],
        [ 7.5313e-02,  1.2051e-02, -4.6925e-03,  ...,  5.6837e-01,
          2.4024e+00, -1.0480e+00],
        [ 1.2543e-02, -4.4059e-02, -2.7430e-02,  ...,  1.1104e-02,
         -1.1259e-02,  2.6949e-02]], device='cuda:0'), tensor([5, 1, 1, 1, 0, 2, 1, 5, 2, 6, 0, 1, 5, 4, 2, 2, 2, 2, 6, 2, 5, 5, 4, 3,
        2, 0, 1, 2, 6, 4, 3, 6, 2, 4, 1, 0, 1, 6, 5, 5, 0, 1, 0, 1, 4, 4, 1, 6,
        2, 0, 6, 6, 1, 2, 6, 6, 6, 1, 6, 4, 1, 4, 5, 1], device='cuda:0')), (tensor([[ 2.9613e-02,  9.7389e-02,  3.4176e-02,  ..., -9.8512e-05,
          8.6707e-02,  9.3068e-02],
        [ 2.8329e-02, -2.2083e-02, -9.1849e-02,  ...,  1.6826e-02,
          2.4215e-03,  2.8802e-02],
        [ 3.6409e-02, -4.1595e-03,  2.7738e-02,  ..., -7.9848e-02,
         -7.4164e-03,  1.4209e-01],
        ...,
        [ 1.7120e-02,  7.2281e-02, -2.9420e-02,  ..., -2.1971e-02,
         -6.1322e-02,  7.7106e-02],
        [ 8.8783e-02, -1.4012e-02, -5.3502e-02,  ...,  8.1869e-03,
         -1.4946e-02,  2.9229e-02],
        [ 3.6551e-02,  3.1819e-02, -1.4912e-02,  ...,  6.7063e-03,
         -2.6801e-02,  3.3291e-02]], device='cuda:0'), tensor([0, 0, 3, 0, 1, 0, 1, 2, 6, 1, 6, 0, 1, 2, 2, 2, 5, 5, 2, 1, 2, 1, 3, 0,
        0, 0, 2, 4, 6, 4, 6, 2, 1, 1, 0, 6, 2, 0, 6, 1, 6, 1, 1, 4, 0, 0, 1, 2,
        6, 6, 1, 6, 5, 1, 1, 6, 1, 0, 1, 0, 5, 2, 4, 2], device='cuda:0')), (tensor([[-0.0260,  0.0469,  0.0042,  ...,  0.0564,  0.1991,  0.3971],
        [ 0.0733,  0.1249, -0.0332,  ...,  0.0575,  0.2606, -0.1215],
        [-0.0391,  0.0854,  0.0104,  ...,  0.3316,  0.4331, -0.3409],
        ...,
        [ 0.0631,  0.0849, -0.0339,  ..., -0.0779, -0.1208,  0.1496],
        [ 0.0254,  0.0424, -0.0364,  ..., -0.0306, -0.0326,  0.0682],
        [ 0.0777,  0.0444, -0.0152,  ...,  0.0082, -0.0277,  0.0358]],
       device='cuda:0'), tensor([6, 6, 6, 3, 0, 1, 2, 1, 5, 3, 0, 0, 3, 2, 2, 2, 4, 4, 1, 2, 0, 2, 6, 6,
        4, 6, 1, 4, 2, 2, 5, 0, 3, 6, 1, 0, 4, 5, 6, 2, 5, 1, 2, 1, 0, 2, 5, 4,
        1, 0, 1, 2, 6, 5, 6, 2, 6, 0, 1, 2, 1, 1, 1, 0], device='cuda:0')), (tensor([[ 3.4221e-02,  6.7862e-02, -3.8836e-02,  ...,  3.7131e-03,
         -1.5382e-02,  3.3222e-02],
        [-2.5913e-03,  1.4186e-01, -4.6084e-02,  ..., -3.8943e-02,
         -4.3593e-02,  1.2705e-01],
        [ 1.2918e-01,  8.7856e-02,  6.0664e-02,  ...,  8.1019e-01,
          2.6853e+00, -1.4992e+00],
        ...,
        [ 2.9522e-02,  5.3029e-02, -4.1896e-02,  ...,  3.8474e-01,
          2.1091e-01,  3.2514e-02],
        [ 3.2904e-02,  2.6789e-02, -4.3456e-02,  ...,  9.5331e-03,
         -2.6131e-02,  3.6485e-02],
        [ 2.7185e-02,  7.3047e-02, -5.9351e-02,  ..., -5.6617e-03,
         -3.5013e-02,  6.3847e-02]], device='cuda:0'), tensor([1, 3, 5, 2, 2, 2, 5, 0, 2, 1, 1, 6, 0, 6, 2, 2, 6, 0, 2, 6, 6, 4, 5, 1,
        3, 0, 0, 6, 2, 0, 4, 2, 5, 4, 6, 6, 1, 4, 1, 6, 0, 5, 6, 4, 4, 0, 4, 2,
        1, 6, 5, 0, 2, 6, 0, 5, 1, 6, 0, 3, 2, 1, 1, 2], device='cuda:0')), (tensor([[ 1.6105e-01,  2.1762e-02, -8.9027e-02,  ...,  9.9463e-03,
         -1.6899e-02,  3.4710e-02],
        [ 3.9234e-02,  6.3971e-05,  3.0989e-02,  ...,  1.7213e-03,
         -2.1004e-02,  4.3604e-02],
        [ 4.3915e-02,  1.4060e-02, -2.5959e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 2.9285e-03, -7.3825e-03, -1.2614e-01,  ...,  3.9937e-01,
          1.7521e+00, -1.1774e+00],
        [ 4.0570e-02,  7.8442e-02, -2.5915e-02,  ...,  9.5658e-03,
         -1.1430e-02,  2.8487e-02],
        [-1.0302e-02,  4.6585e-02, -1.7303e-02,  ...,  1.0004e-02,
         -1.7866e-02,  3.2982e-02]], device='cuda:0'), tensor([1, 6, 1, 4, 6, 0, 5, 1, 6, 5, 1, 1, 0, 1, 1, 1, 0, 1, 4, 1, 0, 1, 5, 1,
        1, 6, 1, 1, 4, 1, 0, 5, 1, 5, 2, 2, 1, 2, 4, 2, 5, 2, 3, 5, 6, 5, 6, 1,
        2, 6, 6, 6, 0, 0, 0, 1, 4, 4, 0, 6, 3, 5, 4, 6], device='cuda:0')), (tensor([[ 2.1957e-02,  8.8024e-02,  9.7951e-04,  ...,  1.2267e+00,
          3.0840e+00, -1.3355e+00],
        [-1.0988e-02,  8.4947e-02, -3.3085e-02,  ..., -1.5668e-02,
         -6.3087e-02,  4.3692e-02],
        [ 4.1859e-04, -1.4437e-03, -9.0012e-02,  ...,  1.8180e-03,
         -1.9000e-02,  3.5580e-02],
        ...,
        [-4.9384e-02,  3.0972e-02, -3.1863e-02,  ...,  1.0177e+00,
          2.4509e+00, -1.5056e+00],
        [ 4.4964e-02, -1.2152e-02, -7.2114e-02,  ...,  1.3533e-02,
         -1.4764e-02,  6.9629e-02],
        [ 5.3688e-02,  4.3895e-02, -4.6739e-02,  ...,  8.4296e-03,
         -1.3765e-02,  2.7842e-02]], device='cuda:0'), tensor([5, 0, 3, 0, 0, 2, 4, 0, 1, 5, 6, 1, 5, 4, 0, 6, 1, 1, 0, 6, 6, 6, 5, 1,
        0, 1, 4, 4, 6, 2, 3, 3, 0, 3, 4, 5, 5, 4, 4, 6, 0, 4, 5, 1, 6, 2, 4, 3,
        4, 4, 1, 4, 1, 6, 5, 0, 2, 4, 4, 5, 2, 5, 3, 1], device='cuda:0')), (tensor([[ 4.7279e-02,  2.3089e-02,  1.6671e-02,  ...,  6.8658e-03,
         -1.6399e-02,  2.8459e-02],
        [ 4.1204e-02,  5.6402e-03, -5.0175e-02,  ..., -2.3079e-01,
          2.1409e+00, -1.3456e+00],
        [ 3.0777e-02, -4.1314e-02, -3.8399e-02,  ..., -1.5212e-02,
         -1.4767e-02,  4.1968e-02],
        ...,
        [ 7.4710e-02, -5.4919e-02,  5.3440e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-3.6508e-02,  2.9624e-02, -5.7395e-03,  ..., -2.0477e-03,
         -3.3622e-02,  5.6626e-02],
        [ 6.0556e-02,  5.4938e-02, -5.7801e-02,  ...,  1.8608e+00,
          3.2653e+00, -1.6775e+00]], device='cuda:0'), tensor([2, 5, 2, 2, 6, 2, 0, 3, 0, 0, 0, 2, 6, 1, 4, 5, 4, 6, 5, 4, 6, 2, 2, 5,
        0, 1, 0, 5, 5, 4, 6, 5, 4, 4, 4, 6, 4, 5, 2, 6, 2, 6, 0, 6, 5, 6, 4, 6,
        0, 2, 4, 1, 5, 3, 4, 4, 4, 2, 2, 1, 5, 1, 3, 5], device='cuda:0')), (tensor([[ 0.1402,  0.0302,  0.0092,  ...,  0.0528, -0.0058,  0.0373],
        [ 0.0386,  0.0070,  0.0041,  ..., -0.0168, -0.0451,  0.0582],
        [ 0.0511,  0.0753,  0.0089,  ...,  1.4812,  2.7930, -1.1336],
        ...,
        [ 0.0855, -0.0226,  0.0758,  ...,  0.0041, -0.0353,  0.0535],
        [ 0.0316,  0.0540,  0.0036,  ...,  0.1172,  0.2874, -0.1909],
        [ 0.0780,  0.0067,  0.0290,  ...,  0.0099,  0.0264,  0.0426]],
       device='cuda:0'), tensor([0, 2, 5, 0, 4, 0, 3, 5, 5, 0, 0, 5, 0, 6, 6, 0, 4, 5, 3, 0, 0, 6, 1, 1,
        0, 1, 1, 6, 1, 3, 2, 5, 2, 6, 1, 4, 2, 0, 1, 0, 5, 2, 2, 1, 6, 4, 1, 3,
        6, 1, 6, 0, 5, 1, 6, 2, 2, 6, 2, 6, 0, 1, 6, 6], device='cuda:0')), (tensor([[ 0.1145,  0.0938, -0.0158,  ..., -0.0082, -0.0224,  0.0507],
        [-0.0103,  0.0670, -0.0452,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0875, -0.0193, -0.0048,  ..., -0.0331,  0.0042,  0.0367],
        ...,
        [ 0.0617,  0.0198, -0.0359,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0924, -0.0078, -0.0388,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0054, -0.0024, -0.0076,  ...,  0.0032, -0.0340,  0.0296]],
       device='cuda:0'), tensor([4, 2, 1, 0, 5, 3, 5, 1, 3, 4, 5, 1, 6, 2, 3, 1, 0, 6, 6, 4, 2, 6, 4, 2,
        6, 2, 5, 1, 2, 6, 1, 6, 1, 1, 0, 5, 4, 1, 0, 5, 5, 4, 3, 0, 1, 0, 5, 2,
        4, 2, 1, 4, 1, 0, 4, 4, 0, 5, 1, 0, 5, 2, 6, 4], device='cuda:0')), (tensor([[ 6.6683e-02, -1.7147e-02,  8.1145e-03,  ...,  1.0494e-01,
          2.1664e-02,  4.4102e-02],
        [ 2.1251e-02,  2.9928e-02, -8.7071e-02,  ..., -6.1364e-02,
         -1.0543e-01,  4.5663e-02],
        [ 3.4724e-02,  1.0580e-01,  4.7798e-02,  ..., -2.9781e-04,
         -2.1208e-02,  4.4085e-02],
        ...,
        [ 8.0937e-02,  1.1709e-01, -2.3453e-02,  ...,  5.2461e-01,
         -5.6396e-03,  1.1105e-02],
        [-5.2756e-02,  5.1327e-02, -1.0590e-01,  ...,  2.1824e-05,
         -2.6423e-02,  5.5550e-02],
        [ 4.5872e-02, -8.3855e-02,  4.5452e-02,  ..., -2.7510e-03,
         -1.4147e-02,  3.1922e-02]], device='cuda:0'), tensor([6, 2, 2, 6, 0, 4, 6, 6, 3, 6, 3, 4, 0, 4, 5, 6, 4, 1, 0, 0, 4, 0, 0, 5,
        0, 4, 1, 5, 3, 6, 3, 5, 1, 0, 4, 1, 0, 4, 5, 2, 0, 0, 6, 5, 1, 0, 5, 4,
        1, 4, 6, 1, 5, 1, 1, 4, 0, 3, 5, 2, 4, 6, 2, 0], device='cuda:0')), (tensor([[ 0.0205, -0.0268, -0.0827,  ..., -0.0215, -0.0574,  0.0478],
        [ 0.0662,  0.1105,  0.0082,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0519,  0.0495, -0.0073,  ..., -0.0604,  0.0633, -0.0130],
        ...,
        [ 0.0321, -0.0185, -0.0709,  ...,  0.0091, -0.0155,  0.0295],
        [-0.0385,  0.0471, -0.0002,  ..., -0.0253, -0.1371,  0.1400],
        [ 0.1064,  0.0884,  0.0694,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([1, 2, 1, 4, 0, 0, 5, 5, 1, 3, 0, 2, 5, 4, 1, 4, 1, 2, 5, 0, 6, 4, 5, 6,
        4, 1, 0, 4, 1, 4, 2, 1, 5, 0, 1, 5, 6, 0, 1, 0, 2, 2, 6, 6, 1, 1, 3, 0,
        5, 1, 6, 1, 6, 0, 0, 1, 4, 6, 5, 0, 1, 1, 0, 4], device='cuda:0')), (tensor([[ 0.0211,  0.0435,  0.0165,  ...,  0.0035, -0.0334,  0.0305],
        [ 0.0445, -0.0290,  0.0075,  ...,  0.0112, -0.0124,  0.0297],
        [-0.0002,  0.0235, -0.0667,  ...,  0.1163,  0.0735,  0.0791],
        ...,
        [ 0.0627,  0.0478,  0.0294,  ..., -0.0298, -0.0389,  0.1078],
        [ 0.0707, -0.0343,  0.0612,  ...,  0.0087,  0.0695, -0.0265],
        [ 0.0796, -0.0197, -0.0086,  ..., -0.0366, -0.0364,  0.0434]],
       device='cuda:0'), tensor([0, 2, 1, 1, 4, 2, 2, 5, 0, 4, 6, 0, 4, 1, 2, 3, 0, 0, 1, 0, 6, 3, 6, 4,
        2, 4, 1, 3, 4, 1, 0, 6, 4, 4, 2, 6, 1, 1, 4, 1, 3, 2, 1, 5, 6, 1, 1, 3,
        5, 0, 4, 1, 2, 6, 6, 6, 6, 0, 4, 4, 5, 1, 0, 0], device='cuda:0')), (tensor([[ 4.3917e-02,  1.4853e-02, -9.8355e-02,  ...,  1.3104e-02,
          2.3366e-03,  2.8925e-02],
        [-5.9639e-03,  3.3096e-03, -3.9854e-02,  ...,  1.1274e-03,
         -1.9356e-02,  3.9218e-02],
        [-3.0333e-03,  6.9152e-02, -2.4880e-02,  ..., -4.8884e-04,
         -2.3556e-02,  4.0870e-02],
        ...,
        [ 1.9710e-03, -3.7779e-02, -3.2127e-02,  ...,  5.5324e-01,
          3.9384e+00, -1.8389e+00],
        [ 4.5326e-02,  2.1601e-02,  1.8878e-02,  ...,  4.0459e-02,
          2.2053e-02,  8.2498e-02],
        [ 2.4848e-02,  8.1306e-03,  3.0742e-02,  ...,  1.0056e-01,
          1.9257e-02,  7.1847e-02]], device='cuda:0'), tensor([0, 6, 6, 6, 1, 3, 1, 2, 5, 2, 1, 2, 4, 3, 4, 0, 0, 4, 4, 0, 4, 1, 6, 2,
        4, 0, 6, 2, 4, 1, 1, 0, 6, 4, 1, 6, 5, 6, 0, 5, 6, 2, 0, 3, 1, 5, 1, 6,
        4, 1, 1, 0, 0, 1, 2, 3, 0, 4, 0, 4, 1, 5, 6, 1], device='cuda:0')), (tensor([[ 0.0457,  0.0518, -0.0032,  ...,  0.0074, -0.0230,  0.0342],
        [-0.0560,  0.0455, -0.0521,  ...,  0.0112, -0.0101,  0.0268],
        [ 0.0432, -0.0261, -0.0272,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0328, -0.0011, -0.0033,  ...,  0.1183,  0.0359, -0.0156],
        [-0.0012,  0.0275,  0.0015,  ..., -0.0031, -0.0183,  0.0590],
        [ 0.0138, -0.0131,  0.0063,  ...,  0.0120, -0.0051,  0.0388]],
       device='cuda:0'), tensor([1, 0, 6, 2, 3, 0, 2, 5, 5, 1, 5, 6, 5, 1, 6, 1, 0, 0, 6, 2],
       device='cuda:0'))], 'env2_in': [(tensor([[ 0.0339, -0.0156, -0.0668,  ...,  0.1357,  0.1343,  0.0081],
        [ 0.0421, -0.0190, -0.0426,  ..., -0.0096, -0.0108,  0.0493],
        [ 0.0262,  0.0239, -0.0155,  ...,  0.0109, -0.0115,  0.0271],
        ...,
        [ 0.0122,  0.0556, -0.0482,  ..., -0.0562, -0.0384,  0.1120],
        [-0.0289,  0.1153, -0.0186,  ...,  1.2084,  4.0418, -2.5355],
        [ 0.0510,  0.0977,  0.0179,  ..., -0.0378,  0.0386, -0.0238]],
       device='cuda:0'), tensor([6, 6, 0, 1, 3, 5, 6, 3, 1, 1, 1, 1, 4, 3, 5, 1, 6, 6, 2, 6, 6, 6, 3, 4,
        6, 3, 5, 4, 5, 5, 0, 0, 6, 4, 4, 6, 4, 6, 2, 0, 0, 6, 0, 2, 6, 2, 5, 6,
        4, 2, 4, 5, 6, 0, 6, 5, 3, 1, 1, 6, 4, 6, 5, 3], device='cuda:0')), (tensor([[ 0.0217,  0.0523, -0.0263,  ...,  0.0121, -0.0143,  0.0311],
        [ 0.0123,  0.0279, -0.0281,  ...,  0.0064,  0.0204,  0.0284],
        [ 0.0786,  0.0032, -0.0422,  ...,  0.0057, -0.0170,  0.0277],
        ...,
        [ 0.0182,  0.0644, -0.0371,  ...,  0.0108, -0.0098,  0.0270],
        [ 0.0521, -0.0095, -0.0413,  ..., -0.0058,  0.0279, -0.0195],
        [ 0.1352, -0.0418, -0.0591,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([1, 1, 4, 6, 4, 6, 6, 5, 6, 2, 2, 5, 5, 6, 2, 3, 4, 1, 5, 6, 6, 4, 5, 5,
        5, 5, 3, 0, 5, 1, 1, 0, 0, 0, 2, 5, 2, 1, 1, 5, 2, 5, 6, 6, 6, 6, 0, 0,
        5, 1, 0, 4, 2, 1, 0, 4, 2, 1, 4, 0, 0, 3, 1, 4], device='cuda:0')), (tensor([[ 0.0624, -0.0098, -0.0755,  ..., -0.0238, -0.0151,  0.0546],
        [ 0.0271,  0.0392,  0.0167,  ..., -0.0063, -0.0231,  0.0397],
        [ 0.0348,  0.0193, -0.0581,  ..., -0.0092, -0.0301,  0.0553],
        ...,
        [ 0.0434,  0.0616, -0.0173,  ..., -0.1700, -0.1576,  0.1404],
        [ 0.0170,  0.0721, -0.0119,  ...,  1.7345,  3.6383, -1.6665],
        [ 0.0447,  0.0292, -0.0579,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([6, 2, 2, 5, 5, 0, 6, 3, 0, 4, 5, 6, 0, 6, 5, 5, 1, 5, 1, 2, 6, 3, 3, 6,
        0, 6, 6, 6, 6, 1, 6, 3, 0, 3, 3, 1, 1, 0, 5, 6, 5, 2, 6, 0, 6, 2, 3, 3,
        2, 6, 2, 0, 3, 6, 6, 0, 4, 5, 6, 6, 3, 2, 5, 4], device='cuda:0')), (tensor([[ 3.3801e-02,  9.2811e-02, -4.4726e-02,  ...,  8.3881e-01,
          3.3319e+00, -1.8557e+00],
        [ 1.8561e-02,  8.7865e-02, -4.2782e-02,  ..., -4.4139e-02,
         -2.1161e-02,  1.4783e-01],
        [ 4.1589e-02,  6.4054e-02,  1.6209e-02,  ..., -1.0099e-02,
         -1.2981e-02,  4.3031e-02],
        ...,
        [ 9.3559e-02, -5.4292e-03, -4.3406e-02,  ..., -1.1819e-01,
          8.2667e-02,  1.2080e-01],
        [ 3.2253e-03,  5.2332e-02, -2.6400e-02,  ...,  5.3323e-01,
          2.7087e+00, -9.7338e-01],
        [ 6.1734e-02,  3.3550e-02, -3.5337e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([5, 1, 0, 4, 6, 2, 0, 3, 1, 3, 6, 1, 0, 4, 6, 0, 0, 6, 4, 4, 5, 5, 6, 4,
        6, 2, 0, 5, 0, 5, 5, 4, 4, 1, 6, 2, 0, 6, 6, 6, 1, 2, 1, 0, 0, 2, 1, 0,
        3, 6, 3, 5, 6, 5, 3, 4, 2, 5, 4, 6, 5, 0, 5, 1], device='cuda:0')), (tensor([[-0.0142,  0.0693,  0.0422,  ...,  0.0011, -0.0505,  0.0895],
        [ 0.1110,  0.0989,  0.0113,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0239,  0.0214,  0.0207,  ...,  0.0003, -0.0158,  0.0416],
        ...,
        [ 0.0482,  0.0116, -0.0263,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0211,  0.0446, -0.0785,  ..., -0.0205, -0.0556,  0.0662],
        [ 0.0151,  0.0903, -0.0493,  ...,  0.0111, -0.0113,  0.0277]],
       device='cuda:0'), tensor([6, 4, 3, 0, 1, 3, 6, 6, 1, 5, 6, 5, 4, 4, 6, 6, 5, 5, 0, 1, 6, 6, 6, 2,
        1, 4, 3, 1, 5, 4, 6, 4, 4, 2, 1, 4, 0, 2, 5, 6, 0, 6, 1, 3, 5, 5, 4, 1,
        2, 6, 0, 5, 6, 6, 3, 1, 3, 2, 6, 4, 5, 3, 6, 0], device='cuda:0')), (tensor([[ 0.0323,  0.0524,  0.0596,  ...,  1.3234,  3.3255, -1.3020],
        [ 0.0281,  0.0052, -0.0693,  ...,  0.6455,  2.1608, -1.3477],
        [ 0.0441,  0.0539, -0.0193,  ..., -0.0529, -0.0181,  0.2073],
        ...,
        [-0.0221,  0.0822, -0.0078,  ..., -0.0088, -0.0391,  0.0352],
        [ 0.0910,  0.0541,  0.0039,  ...,  0.0080, -0.0153,  0.0296],
        [ 0.0119,  0.0581, -0.0146,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([5, 5, 6, 5, 5, 1, 1, 1, 2, 5, 4, 3, 6, 5, 1, 1, 6, 5, 6, 1, 2, 5, 1, 0,
        1, 6, 2, 3, 4, 1, 6, 6, 6, 3, 4, 2, 6, 5, 4, 3, 3, 4, 1, 6, 3, 3, 2, 6,
        2, 6, 5, 6, 3, 4, 2, 4, 3, 6, 5, 4, 4, 2, 0, 6], device='cuda:0')), (tensor([[-0.0012,  0.0245, -0.0488,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0112,  0.0021, -0.0375,  ..., -0.0152, -0.0826,  0.1233],
        [ 0.0496,  0.0385, -0.0618,  ...,  0.0105,  0.1864,  0.1743],
        ...,
        [ 0.0432,  0.1005,  0.0338,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0046,  0.0516, -0.0080,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0343,  0.0392, -0.0262,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([0, 6, 6, 0, 5, 0, 3, 5, 6, 5, 6, 1, 3, 2, 4, 1, 5, 2, 5, 2, 6, 3, 3, 5,
        0, 2, 2, 4, 0, 0, 0, 6, 2, 5, 0, 6, 3, 3, 0, 4, 5, 1, 5, 3, 4, 4, 3, 3,
        6, 5, 6, 5, 5, 0, 6, 2, 3, 4, 6, 5, 3, 2, 0, 0], device='cuda:0')), (tensor([[ 4.2419e-02,  5.6618e-02, -3.0756e-02,  ..., -3.0175e-02,
         -1.1457e-02,  7.0805e-02],
        [ 9.2548e-03,  2.3283e-02, -3.8837e-02,  ..., -2.5148e-02,
         -2.6998e-02,  1.3338e-02],
        [ 4.5215e-02, -8.4346e-03, -2.4217e-02,  ..., -6.0749e-02,
         -3.2806e-02,  1.3441e-01],
        ...,
        [ 3.7861e-02,  6.8350e-02, -2.0442e-02,  ..., -1.4286e-01,
         -1.3807e-01,  1.4499e-01],
        [ 5.2828e-02,  3.9064e-02, -1.3256e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-1.4968e-03, -2.9026e-02, -9.9052e-02,  ...,  1.2849e+00,
          3.3709e+00, -1.1696e+00]], device='cuda:0'), tensor([3, 6, 1, 1, 5, 2, 6, 1, 6, 6, 0, 0, 6, 1, 3, 5, 6, 6, 6, 3, 2, 5, 4, 2,
        1, 5, 4, 3, 3, 0, 3, 6, 4, 6, 5, 5, 6, 0, 0, 6, 6, 4, 6, 6, 3, 4, 2, 1,
        1, 6, 1, 5, 2, 6, 3, 6, 2, 4, 1, 4, 0, 2, 6, 5], device='cuda:0')), (tensor([[-3.5558e-03,  2.5205e-02, -5.0446e-02,  ...,  1.9701e+00,
          4.4763e+00, -1.9940e+00],
        [ 8.6447e-02,  4.7731e-03, -5.5622e-03,  ...,  1.1103e-02,
         -1.0457e-02,  2.6658e-02],
        [ 2.8020e-03,  3.3386e-02, -3.5023e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [-2.5478e-02, -2.9016e-02, -4.4132e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 7.4304e-03,  3.2233e-02, -4.0579e-02,  ..., -2.3749e-02,
         -3.7250e-02,  7.5160e-02],
        [ 5.6755e-02,  2.2208e-02,  3.8823e-02,  ..., -1.1342e-02,
         -6.8699e-03,  4.2233e-02]], device='cuda:0'), tensor([5, 4, 6, 6, 6, 1, 5, 6, 2, 6, 6, 3, 6, 2, 4, 3, 4, 2, 6, 1, 6, 6, 6, 4,
        0, 6, 3, 5, 1, 5, 5, 5, 5, 2, 2, 1, 2, 4, 2, 4, 2, 6, 3, 1, 5, 5, 5, 0,
        1, 5, 6, 5, 6, 6, 4, 6, 5, 6, 6, 3, 1, 1, 6, 2], device='cuda:0')), (tensor([[ 0.0137, -0.0019, -0.0397,  ...,  0.0028, -0.0340,  0.0864],
        [ 0.0688,  0.0493,  0.0356,  ...,  0.0079, -0.0157,  0.0365],
        [ 0.0541,  0.1032, -0.0147,  ...,  0.0194, -0.0181,  0.0243],
        ...,
        [-0.0084,  0.0790, -0.0175,  ...,  0.0053, -0.0262,  0.0373],
        [ 0.0371,  0.0062, -0.0655,  ...,  0.0051, -0.0285,  0.0452],
        [ 0.0241, -0.0317, -0.0399,  ..., -0.0163, -0.0199,  0.0397]],
       device='cuda:0'), tensor([6, 4, 3, 5, 0, 0, 3, 6, 6, 3, 3, 6, 6, 4, 0, 6, 6, 3, 5, 6, 6, 3, 2, 4,
        6, 5, 5, 0, 3, 6, 5, 0, 6, 5, 2, 5, 5, 5, 0, 4, 3, 1, 4, 6, 5, 1, 5, 0,
        0, 6, 5, 5, 0, 2, 6, 5, 3, 0, 1, 3, 4, 2, 3, 6], device='cuda:0')), (tensor([[ 0.0773,  0.0279, -0.0675,  ...,  0.0062, -0.0172,  0.0323],
        [ 0.0185,  0.0065, -0.0524,  ..., -0.0074, -0.0297,  0.0437],
        [ 0.0075,  0.0566, -0.0137,  ..., -0.0083, -0.0526,  0.0975],
        ...,
        [ 0.0225,  0.0414,  0.0006,  ..., -0.0054, -0.0190,  0.0408],
        [ 0.0259,  0.0195, -0.0291,  ...,  0.0050, -0.0057,  0.0452],
        [ 0.0171,  0.0458,  0.0157,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([2, 6, 6, 3, 0, 6, 4, 6, 6, 5, 4, 5, 1, 0, 6, 1, 0, 6, 4, 2, 5, 0, 0, 3,
        2, 5, 5, 3, 4, 5, 6, 5, 3, 4, 0, 1, 1, 5, 6, 1, 4, 2, 2, 6, 1, 5, 1, 6,
        1, 6, 6, 4, 2, 3, 3, 6, 5, 3, 6, 0, 3, 4, 2, 2], device='cuda:0')), (tensor([[-0.0177,  0.0233, -0.0852,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0072,  0.0681, -0.0271,  ..., -0.0043, -0.0074,  0.0411],
        [ 0.0014,  0.0287, -0.0375,  ..., -0.0111, -0.0145,  0.0415],
        ...,
        [ 0.0511,  0.0488, -0.0237,  ...,  0.0116, -0.0278,  0.0470],
        [ 0.0211,  0.0446, -0.0113,  ..., -0.0116, -0.0219,  0.0870],
        [ 0.0384,  0.0536,  0.0105,  ...,  0.0074, -0.0082,  0.0309]],
       device='cuda:0'), tensor([6, 2, 0, 6, 2, 6, 6, 3, 3, 3, 6, 5, 3, 5, 5, 4, 0, 4, 6, 6, 3, 2, 4, 0,
        2, 4, 0, 5, 3, 1, 6, 6, 3, 2, 6, 0, 2, 5, 6, 6, 5, 3, 4, 2, 3, 1, 0, 2,
        3, 6, 5, 0, 5, 6, 0, 1, 1, 6, 2, 6, 2, 0, 0, 4], device='cuda:0')), (tensor([[ 0.0291,  0.0382, -0.0620,  ..., -0.0064, -0.0241,  0.0480],
        [-0.0249,  0.0150, -0.0791,  ...,  0.0081, -0.0151,  0.0295],
        [ 0.0489,  0.0261, -0.0054,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [ 0.0287,  0.0492, -0.0109,  ..., -0.0440, -0.0577,  0.1039],
        [ 0.0489, -0.0161, -0.0325,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0472,  0.0376, -0.0498,  ...,  0.0061, -0.0343,  0.0469]],
       device='cuda:0'), tensor([3, 6, 0, 6, 6, 6, 0, 5, 2, 4, 5, 3, 3, 3, 6, 1, 6, 1, 1, 2, 1, 6, 0, 6,
        3, 3, 0, 0, 4, 2, 4, 5, 6, 0, 1, 3, 3, 2, 2, 4, 5, 5, 0, 1, 1, 1, 0, 6,
        6, 5, 6, 3, 4, 5, 5, 6, 6, 6, 1, 2, 1, 1, 6, 6], device='cuda:0')), (tensor([[ 8.0825e-02,  4.0141e-02, -3.1935e-05,  ...,  9.6408e-03,
         -1.2887e-02,  3.0600e-02],
        [ 4.9879e-02,  8.6594e-03, -8.8416e-02,  ...,  8.7514e-03,
         -9.6181e-03,  2.8270e-02],
        [ 5.6370e-02,  2.3222e-02, -3.3090e-02,  ..., -8.7958e-02,
         -6.2200e-02,  1.4054e-01],
        ...,
        [ 1.0186e-01,  9.7989e-02, -4.8612e-02,  ..., -9.0047e-03,
         -2.6992e-02,  6.2823e-02],
        [ 1.0408e-01, -1.9891e-02,  1.2366e-02,  ...,  8.5637e-01,
          3.4341e+00, -1.6752e+00],
        [ 2.6765e-02,  1.7362e-02, -2.3910e-02,  ...,  5.8474e-01,
          2.2981e+00, -9.6659e-01]], device='cuda:0'), tensor([0, 6, 2, 5, 0, 4, 5, 2, 2, 0, 3, 5, 0, 2, 6, 3, 3, 4, 4, 4, 2, 4, 6, 4,
        6, 6, 6, 6, 0, 6, 5, 1, 1, 6, 5, 6, 3, 4, 6, 1, 1, 1, 3, 6, 1, 6, 6, 5,
        5, 5, 6, 6, 1, 5, 4, 2, 5, 3, 2, 3, 6, 4, 5, 5], device='cuda:0')), (tensor([[ 5.1625e-02, -3.0714e-03, -1.5440e-02,  ...,  1.1498e+00,
          4.3490e+00, -1.5715e+00],
        [ 3.9640e-02, -1.9864e-02, -1.0651e-01,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 1.4142e-02,  1.8984e-02, -2.4081e-02,  ...,  5.7118e-04,
         -1.8128e-03,  4.8713e-02],
        ...,
        [ 6.0907e-02,  3.3491e-02, -3.3139e-02,  ...,  1.8304e+00,
          3.9009e+00, -1.6083e+00],
        [-3.3139e-02,  6.6749e-02, -3.4657e-02,  ...,  1.1363e-02,
         -1.0950e-02,  2.6963e-02],
        [ 1.4508e-01, -1.9806e-02,  8.2766e-03,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([5, 4, 2, 1, 5, 5, 0, 2, 5, 5, 6, 6, 6, 4, 6, 1, 3, 6, 5, 6, 0, 6, 3, 3,
        4, 4, 2, 4, 2, 5, 0, 6, 5, 6, 1, 1, 6, 6, 3, 3, 4, 4, 4, 3, 2, 1, 0, 6,
        1, 3, 5, 5, 6, 6, 2, 5, 1, 6, 5, 2, 6, 5, 3, 3], device='cuda:0')), (tensor([[ 0.0571,  0.0077, -0.0280,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0603,  0.0422, -0.0163,  ..., -0.0127, -0.0568,  0.1445],
        [ 0.0419,  0.0340, -0.0443,  ..., -0.0297, -0.0304,  0.0908],
        ...,
        [-0.0104,  0.0398, -0.1108,  ...,  0.6084,  2.3273, -1.1774],
        [ 0.0670,  0.0433, -0.0086,  ...,  0.0111, -0.0142,  0.0355],
        [ 0.0313,  0.0777, -0.0062,  ...,  0.0072, -0.0055,  0.0265]],
       device='cuda:0'), tensor([4, 0, 6, 0, 5, 6, 0, 3, 4, 6, 4, 3, 4, 0, 5, 3, 6, 5, 6, 2, 6, 4, 6, 5,
        6, 6, 6, 3, 4, 6, 6, 0, 6, 0, 1, 2, 5, 4, 6, 6, 5, 6, 1, 5, 6, 6, 6, 5,
        6, 1, 1, 3, 5, 2, 3, 1, 1, 6, 6, 6, 0, 5, 1, 6], device='cuda:0')), (tensor([[ 2.9921e-02,  1.1442e-02, -9.3251e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 2.4166e-02,  5.2017e-02, -3.5431e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-7.7763e-03,  4.0322e-02, -1.0586e-01,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 5.2950e-02,  2.9717e-02, -4.6129e-02,  ...,  6.9549e-01,
          2.6104e+00, -1.2033e+00],
        [-2.5671e-02,  1.5782e-03, -3.7352e-02,  ...,  1.2292e+00,
          3.6271e+00, -1.6955e+00],
        [ 2.4648e-02,  6.3304e-02, -3.7891e-02,  ...,  4.7388e-02,
          3.9885e-03,  3.2237e-02]], device='cuda:0'), tensor([6, 0, 6, 6, 4, 5, 2, 5, 4, 6, 5, 6, 5, 2, 6, 6, 1, 0, 0, 1, 6, 6, 4, 6,
        4, 0, 5, 2, 5, 6, 4, 0, 5, 0, 1, 5, 2, 6, 3, 3, 4, 1, 1, 2, 0, 3, 3, 2,
        6, 2, 4, 1, 6, 5, 2, 5, 0, 6, 5, 5, 1, 5, 5, 0], device='cuda:0')), (tensor([[ 2.0960e-02,  3.7082e-02, -7.3214e-02,  ...,  3.7350e-02,
          1.6523e-01, -1.6165e-02],
        [ 7.3045e-02,  7.2131e-03, -3.4857e-02,  ..., -1.5300e-02,
         -6.2537e-03,  3.9445e-02],
        [ 6.1830e-02,  1.4904e-01, -5.7131e-02,  ...,  2.1946e+00,
          5.3865e+00, -2.5338e+00],
        ...,
        [ 1.2533e-02,  3.4057e-02, -1.4342e-02,  ...,  5.9760e-03,
          1.3982e-02, -2.8358e-03],
        [ 2.3040e-02, -1.3871e-04, -2.6762e-02,  ...,  8.2443e-01,
          3.3212e+00, -1.2852e+00],
        [ 4.7824e-02,  6.9626e-02, -5.4463e-03,  ...,  7.5791e-03,
         -2.6260e-02,  3.6402e-02]], device='cuda:0'), tensor([4, 0, 5, 5, 1, 2, 3, 5, 5, 4, 6, 5, 2, 0, 4, 4, 6, 2, 4, 4, 5, 5, 1, 1,
        4, 6, 5, 3, 2, 5, 2, 6, 5, 6, 3, 5, 6, 2, 0, 6, 6, 3, 6, 1, 5, 6, 6, 2,
        2, 0, 1, 0, 6, 6, 4, 5, 5, 4, 6, 1, 3, 0, 5, 0], device='cuda:0')), (tensor([[ 2.6859e-02,  1.0531e-01, -4.4856e-02,  ...,  1.8930e-02,
         -3.2242e-02,  1.6817e-02],
        [ 2.7011e-02,  2.3553e-02,  7.9558e-03,  ...,  9.4576e-06,
         -3.2158e-02,  5.8621e-02],
        [ 5.5729e-02,  1.4248e-02, -5.8212e-02,  ...,  8.6953e-03,
         -5.4824e-02,  4.3258e-02],
        ...,
        [ 4.7638e-02,  1.7564e-02,  1.1293e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-2.6733e-03,  6.2820e-02, -3.4177e-02,  ...,  8.9837e-03,
         -1.2308e-02,  2.7957e-02],
        [ 5.2665e-02,  8.4814e-02, -1.6690e-02,  ..., -7.2375e-02,
         -7.6602e-02,  8.5647e-02]], device='cuda:0'), tensor([6, 2, 6, 0, 6, 4, 5, 4, 6, 6, 4, 6, 2, 5, 6, 3, 6, 2, 0, 1, 4, 6, 2, 5,
        1, 2, 6, 6, 1, 1, 6, 6, 2, 4, 6, 4, 3, 4, 6, 6, 4, 5, 2, 4, 5, 6, 5, 6,
        6, 2, 6, 0, 2, 1, 1, 1, 6, 6, 5, 1, 6, 3, 1, 0], device='cuda:0')), (tensor([[ 0.1081,  0.0072, -0.0721,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0221,  0.0169, -0.0304,  ...,  0.0059, -0.0157,  0.0360],
        [ 0.0604,  0.0142, -0.0022,  ...,  0.0175,  0.0008,  0.0461],
        ...,
        [ 0.0323,  0.0267, -0.0199,  ...,  0.0076, -0.0037,  0.0226],
        [ 0.0198, -0.0146,  0.0067,  ..., -0.0072, -0.0236,  0.0413],
        [ 0.0112,  0.0841, -0.0252,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([1, 3, 6, 2, 2, 0, 6, 5, 5, 2, 0, 0, 3, 6, 1, 4, 1, 3, 2, 6, 6, 2, 2, 3,
        6, 6, 6, 0, 1, 4, 1, 3, 3, 6, 5, 0, 5, 2, 3, 6, 5, 1, 4, 2, 5, 6, 3, 0,
        6, 3, 6, 4, 1, 3, 6, 2, 4, 0, 6, 6, 3, 6, 4, 4], device='cuda:0')), (tensor([[ 0.0568, -0.0006, -0.0123,  ..., -0.0076, -0.0680,  0.0666],
        [-0.0037,  0.1196,  0.0462,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0253,  0.0540, -0.0656,  ...,  0.0109, -0.0171,  0.0356],
        ...,
        [ 0.0298,  0.0533, -0.0047,  ...,  0.0135, -0.0109,  0.0248],
        [ 0.0110,  0.0346, -0.0280,  ...,  0.0018, -0.0157,  0.0378],
        [ 0.0156,  0.0222, -0.0762,  ...,  0.0331, -0.0090,  0.0328]],
       device='cuda:0'), tensor([1, 2, 6, 3, 6, 6, 3, 5, 6, 6, 6, 6, 4, 4, 6, 0, 0, 2, 4, 2, 1, 4, 5, 3,
        1, 5, 6, 6, 5, 6, 0, 1, 6, 1, 6, 5, 4, 4, 4, 6, 3, 5, 4, 6, 6, 6, 2, 2,
        3, 6, 0, 6, 0, 2, 4, 1], device='cuda:0'))], 'env3_in': [(tensor([[ 0.0772,  0.0911, -0.0464,  ..., -0.0100, -0.0716,  0.1021],
        [-0.0308,  0.0267, -0.0658,  ...,  0.0016, -0.0108,  0.0640],
        [-0.0063,  0.1165, -0.0248,  ...,  0.0069, -0.0159,  0.0304],
        ...,
        [ 0.0003,  0.0952, -0.0856,  ...,  0.0067, -0.0221,  0.0349],
        [ 0.0169,  0.1786,  0.0457,  ...,  0.0058, -0.0172,  0.0283],
        [ 0.0500,  0.0225, -0.0811,  ..., -0.0492, -0.0676,  0.0766]],
       device='cuda:0'), tensor([0, 3, 1, 1, 4, 0, 1, 1, 3, 4, 2, 4, 3, 1, 1, 6, 2, 2, 3, 4, 4, 2, 2, 0,
        5, 4, 1, 3, 1, 2, 0, 4, 3, 4, 2, 4, 0, 3, 4, 2, 1, 4, 3, 5, 1, 0, 3, 0,
        0, 4, 6, 0, 2, 1, 4, 3, 0, 4, 0, 3, 4, 0, 4, 2], device='cuda:0')), (tensor([[ 0.0335,  0.0223, -0.0125,  ...,  0.0054, -0.0171,  0.0314],
        [-0.0120, -0.0281, -0.0992,  ..., -0.0120, -0.0441,  0.0647],
        [-0.1575,  0.1684,  0.0740,  ..., -0.0856, -0.0510,  0.1698],
        ...,
        [-0.0109,  0.0560, -0.1045,  ..., -0.0281, -0.0190,  0.0991],
        [-0.1491,  0.1183, -0.0632,  ...,  0.0132,  0.0439,  0.0205],
        [ 0.0051,  0.0148, -0.0445,  ..., -0.1156, -0.0363,  0.1580]],
       device='cuda:0'), tensor([0, 2, 4, 0, 3, 6, 4, 4, 4, 4, 4, 1, 5, 0, 0, 3, 2, 3, 5, 2, 2, 1, 3, 1,
        0, 1, 4, 0, 1, 5, 1, 0, 0, 3, 2, 1, 0, 3, 3, 4, 2, 0, 1, 2, 1, 1, 6, 3,
        1, 5, 5, 2, 4, 0, 1, 2, 2, 4, 4, 2, 0, 0, 4, 3], device='cuda:0')), (tensor([[-0.1499, -0.0020, -0.1536,  ..., -0.0061, -0.0350,  0.0581],
        [ 0.0413,  0.0609,  0.0090,  ...,  0.0137, -0.0161,  0.0637],
        [-0.1520,  0.2055, -0.0599,  ...,  0.0077, -0.0217,  0.0246],
        ...,
        [ 0.0324,  0.0564,  0.0599,  ...,  0.0097, -0.0130,  0.0281],
        [ 0.0218,  0.0175, -0.0056,  ..., -0.0085, -0.0485,  0.0828],
        [-0.0129,  0.1272, -0.0159,  ..., -0.1323, -0.1264,  0.1254]],
       device='cuda:0'), tensor([2, 3, 2, 3, 4, 1, 5, 0, 3, 2, 4, 6, 1, 2, 3, 4, 0, 6, 3, 2, 0, 4, 2, 2,
        4, 0, 0, 2, 4, 3, 1, 6, 1, 1, 1, 0, 2, 3, 1, 0, 3, 0, 3, 2, 4, 3, 0, 4,
        1, 4, 2, 0, 4, 1, 0, 1, 0, 0, 4, 0, 1, 1, 3, 2], device='cuda:0')), (tensor([[ 0.0581,  0.1107,  0.0672,  ..., -0.0342, -0.0424,  0.1109],
        [ 0.0118,  0.0142, -0.0339,  ..., -0.0008, -0.0171,  0.0497],
        [ 0.0556,  0.1362, -0.1646,  ...,  0.0115, -0.0159,  0.0284],
        ...,
        [ 0.0050,  0.0959, -0.0434,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0093, -0.0180, -0.0443,  ...,  0.0038, -0.0267,  0.0498],
        [-0.0273, -0.0237, -0.1152,  ...,  0.0025, -0.0218,  0.0543]],
       device='cuda:0'), tensor([1, 3, 0, 2, 4, 0, 4, 1, 4, 4, 1, 2, 4, 4, 6, 1, 3, 1, 0, 0, 1, 3, 1, 1,
        0, 4, 0, 6, 3, 4, 0, 3, 1, 1, 6, 1, 3, 1, 2, 2, 4, 4, 4, 1, 1, 5, 4, 0,
        0, 0, 2, 1, 3, 1, 4, 2, 0, 0, 0, 4, 4, 4, 4, 3], device='cuda:0')), (tensor([[ 0.0689,  0.1154,  0.0087,  ...,  0.0115, -0.0115,  0.0268],
        [ 0.0570,  0.1451,  0.0721,  ...,  0.0004, -0.0205,  0.0396],
        [-0.0415,  0.1663, -0.0703,  ...,  0.1554,  0.0630, -0.0344],
        ...,
        [-0.0385,  0.0765, -0.0921,  ...,  0.0009, -0.0292,  0.0565],
        [ 0.0829,  0.0789,  0.0119,  ..., -0.0037, -0.0390,  0.0581],
        [ 0.0589,  0.2363,  0.0299,  ..., -0.0020, -0.0206,  0.0363]],
       device='cuda:0'), tensor([1, 0, 4, 4, 3, 4, 2, 2, 2, 0, 2, 4, 2, 0, 3, 0, 4, 3, 0, 3, 3, 1, 2, 2,
        3, 4, 1, 1, 0, 1, 1, 0, 2, 2, 6, 3, 3, 0, 1, 0, 6, 0, 3, 1, 3, 2, 0, 4,
        1, 1, 4, 1, 6, 1, 3, 1, 0, 3, 1, 4, 2, 2, 0, 1], device='cuda:0')), (tensor([[-0.0497,  0.0575, -0.1193,  ...,  0.0072, -0.0265,  0.0447],
        [ 0.1164, -0.0326,  0.0331,  ..., -0.0133, -0.0382,  0.0431],
        [-0.0632, -0.0304, -0.0578,  ...,  0.0025, -0.0297,  0.0469],
        ...,
        [-0.0815,  0.1360, -0.1882,  ..., -0.0046, -0.0449,  0.1164],
        [ 0.0166,  0.1101,  0.0318,  ..., -0.0428, -0.0946,  0.0888],
        [ 0.0439,  0.0340, -0.0151,  ...,  0.0092, -0.0246,  0.0337]],
       device='cuda:0'), tensor([3, 2, 1, 2, 3, 1, 2, 3, 2, 4, 2, 2, 2, 3, 4, 4, 3, 2, 4, 3, 2, 2, 4, 3,
        1, 1, 0, 6, 1, 4, 6, 3, 2, 2, 6, 2, 1, 2, 4, 4, 2, 2, 0, 2, 3, 2, 4, 0,
        0, 4, 2, 2, 0, 0, 2, 4, 3, 1, 1, 4, 1, 1, 1, 2], device='cuda:0')), (tensor([[ 0.0287,  0.0880,  0.0490,  ..., -0.0470, -0.0714,  0.0720],
        [ 0.1079,  0.1248, -0.0356,  ...,  0.0061, -0.0171,  0.0335],
        [-0.0518,  0.0144, -0.0479,  ..., -0.0017, -0.0288,  0.0486],
        ...,
        [ 0.0173,  0.0584, -0.0452,  ...,  0.9071,  0.7103, -0.5329],
        [ 0.0136,  0.0391, -0.0293,  ..., -0.0036, -0.0108,  0.0646],
        [-0.1308,  0.1188, -0.0892,  ...,  0.0107, -0.0211,  0.0358]],
       device='cuda:0'), tensor([4, 0, 0, 4, 0, 0, 1, 0, 4, 0, 2, 4, 4, 3, 4, 2, 0, 3, 5, 2, 4, 2, 1, 3,
        2, 3, 2, 6, 6, 2, 4, 4, 0, 0, 2, 6, 3, 1, 4, 3, 0, 0, 3, 4, 4, 4, 0, 0,
        2, 5, 5, 0, 0, 0, 1, 2, 1, 3, 1, 0, 2, 1, 6, 0], device='cuda:0')), (tensor([[-8.3663e-04,  5.4590e-02, -1.7866e-02,  ...,  3.6720e-04,
         -2.6973e-02,  4.9099e-02],
        [-1.7119e-01,  1.4055e-01,  1.0842e-02,  ...,  4.0671e-03,
         -2.3109e-02,  5.0477e-02],
        [ 3.5602e-02,  4.9029e-02, -1.9851e-02,  ..., -1.2456e-01,
         -1.8090e-01,  1.2026e-01],
        ...,
        [-5.5091e-03,  6.3276e-02, -3.7154e-02,  ...,  1.1571e+00,
          2.6824e+00, -1.7455e+00],
        [-2.6009e-02, -2.7271e-02, -2.0473e-02,  ...,  7.9497e-03,
         -1.5315e-02,  2.9622e-02],
        [ 1.5983e-01,  5.5308e-02,  4.1623e-02,  ...,  3.5485e-02,
         -1.1755e-02,  4.5257e-02]], device='cuda:0'), tensor([3, 0, 2, 3, 1, 2, 6, 6, 2, 0, 4, 3, 2, 2, 1, 0, 2, 4, 3, 0, 4, 2, 0, 2,
        4, 3, 3, 0, 5, 2, 1, 1, 3, 0, 0, 2, 3, 3, 1, 4, 2, 0, 2, 3, 4, 4, 6, 3,
        2, 2, 1, 4, 2, 4, 6, 0, 1, 3, 1, 4, 0, 5, 2, 0], device='cuda:0')), (tensor([[-0.0072,  0.0389, -0.0237,  ..., -0.0079, -0.0242,  0.0413],
        [-0.0543,  0.0791, -0.1926,  ..., -0.0032, -0.0027,  0.0327],
        [ 0.0133, -0.0267, -0.0709,  ..., -0.0229, -0.0695,  0.0712],
        ...,
        [-0.0104,  0.0266,  0.0082,  ...,  0.0068, -0.0165,  0.0306],
        [-0.0020, -0.0248, -0.0616,  ...,  0.0038, -0.0096,  0.0497],
        [-0.0408,  0.0023, -0.0725,  ...,  0.0032, -0.0210,  0.0343]],
       device='cuda:0'), tensor([1, 0, 6, 4, 1, 2, 0, 1, 0, 4, 4, 1, 1, 4, 1, 0, 4, 2, 1, 4, 1, 3, 2, 5,
        0, 1, 0, 2, 1, 1, 4, 0, 2, 3, 0, 3, 2, 5, 0, 0, 2, 1, 3, 3, 3, 2, 0, 0,
        2, 4, 4, 0, 4, 4, 0, 0, 2, 1, 4, 6, 0, 0, 3, 2], device='cuda:0')), (tensor([[ 0.0341,  0.0194, -0.0466,  ...,  0.0047, -0.0154,  0.0487],
        [ 0.0345,  0.0155, -0.0287,  ..., -0.0115,  0.0377, -0.0022],
        [-0.2159,  0.2259, -0.0478,  ...,  0.0091, -0.0138,  0.0286],
        ...,
        [-0.0294,  0.0478, -0.0330,  ..., -0.0003, -0.0256,  0.0415],
        [-0.0272,  0.0291, -0.0721,  ..., -0.0162, -0.0401,  0.0895],
        [ 0.0282,  0.0306, -0.0146,  ...,  0.0118, -0.0176,  0.0283]],
       device='cuda:0'), tensor([3, 6, 2, 0, 1, 1, 0, 2, 4, 2, 5, 0, 3, 1, 0, 4, 4, 2, 0, 1, 3, 3, 0, 4,
        0, 0, 2, 3, 1, 1, 2, 1, 0, 0, 2, 6, 4, 1, 2, 4, 4, 2, 2, 4, 4, 3, 2, 3,
        4, 3, 1, 1, 0, 0, 2, 0, 1, 4, 1, 2, 0, 3, 3, 1], device='cuda:0')), (tensor([[-0.1108, -0.0048, -0.0947,  ..., -0.0573, -0.0074,  0.0553],
        [-0.0070,  0.1755,  0.0202,  ..., -0.0036,  0.0436,  0.0680],
        [ 0.0426,  0.1273,  0.0612,  ...,  0.0011, -0.0272,  0.0392],
        ...,
        [ 0.0144,  0.1366, -0.0458,  ...,  0.0088, -0.0201,  0.0312],
        [-0.0117,  0.1201, -0.0882,  ...,  0.0049, -0.0326,  0.0543],
        [ 0.0113,  0.0416, -0.0241,  ...,  0.0025, -0.0217,  0.0328]],
       device='cuda:0'), tensor([0, 4, 4, 3, 4, 2, 1, 0, 1, 2, 5, 0, 6, 3, 1, 4, 3, 5, 0, 2, 3, 1, 4, 0,
        4, 2, 3, 4, 0, 2, 1, 1, 2, 4, 6, 0, 1, 0, 2, 0, 4, 2, 3, 1, 0, 3, 2, 2,
        0, 2, 0, 2, 2, 2, 4, 3, 3, 2, 3, 1, 3, 3, 1, 2], device='cuda:0')), (tensor([[ 0.0067,  0.0292, -0.0142,  ..., -0.0614, -0.0582,  0.0835],
        [-0.0031,  0.2469,  0.0660,  ..., -0.0015, -0.0421,  0.0408],
        [ 0.0210,  0.1671,  0.0243,  ...,  0.0101, -0.0126,  0.0278],
        ...,
        [ 0.0292,  0.0039, -0.0178,  ..., -0.0090, -0.0373,  0.0469],
        [ 0.0280,  0.0433, -0.0044,  ...,  0.0578,  0.0567, -0.0701],
        [ 0.0189,  0.0543, -0.0161,  ...,  0.0588,  0.0464, -0.0486]],
       device='cuda:0'), tensor([6, 4, 4, 0, 6, 2, 4, 4, 4, 4, 2, 4, 1, 0, 1, 4, 4, 1, 2, 3, 1, 6, 0, 2,
        2, 0, 0, 3, 4, 1, 3, 1, 0, 4, 0, 4, 2, 3, 2, 4, 5, 3, 2, 4, 4, 2, 4, 4,
        2, 1, 2, 2, 1, 0, 2, 0, 2, 4, 1, 5, 1, 0, 1, 1], device='cuda:0')), (tensor([[ 0.0407,  0.1916, -0.0500,  ...,  0.0114, -0.0117,  0.0313],
        [ 0.0289,  0.0566, -0.0512,  ..., -0.0183, -0.0389,  0.0789],
        [ 0.0449,  0.0945,  0.0627,  ...,  0.2234,  0.1186, -0.0258],
        ...,
        [-0.0612,  0.0573, -0.0841,  ...,  0.0076, -0.0168,  0.0419],
        [-0.0120,  0.0854, -0.0861,  ...,  0.0081, -0.0167,  0.0491],
        [ 0.0194,  0.0870,  0.0373,  ..., -0.0007, -0.0193,  0.0391]],
       device='cuda:0'), tensor([4, 6, 1, 2, 0, 4, 4, 4, 4, 0, 1, 0, 2, 0, 3, 0, 4, 1, 4, 4, 0, 0, 3, 1,
        0, 0, 6, 6, 0, 0, 2, 2, 0, 0, 0, 4, 0, 2, 3, 1, 3, 2, 2, 1, 2, 2, 2, 2,
        2, 6, 1, 0, 2, 3, 2, 0, 1, 4, 1, 4, 3, 4, 4, 1], device='cuda:0')), (tensor([[-0.0147,  0.2362,  0.0635,  ...,  0.0096, -0.0130,  0.0295],
        [ 0.0543,  0.2471,  0.1075,  ...,  0.0108, -0.0180,  0.0308],
        [ 0.0642,  0.0184, -0.1031,  ...,  0.0065, -0.0237,  0.0430],
        ...,
        [-0.0015,  0.1443,  0.0973,  ...,  0.0095, -0.0134,  0.0293],
        [ 0.0247,  0.0660, -0.0299,  ...,  0.0021, -0.0141,  0.0607],
        [ 0.0648,  0.0821, -0.0777,  ..., -0.0192, -0.0759,  0.2114]],
       device='cuda:0'), tensor([2, 4, 3, 0, 5, 2, 0, 0, 1, 6, 4, 0, 2, 1, 4, 0, 1, 2, 0, 0, 0, 2, 4, 0,
        4, 1, 4, 2, 1, 4, 3, 3, 2, 3, 3, 5, 0, 3, 3, 1, 1, 4, 1, 0, 2, 4, 3, 4,
        0, 2, 3, 5, 4, 4, 1, 4, 2, 2, 3, 2, 4, 4, 4, 1], device='cuda:0')), (tensor([[ 0.0155,  0.0687,  0.0354,  ...,  0.0083, -0.0147,  0.0290],
        [ 0.0325,  0.0333, -0.0874,  ...,  0.0110, -0.0359,  0.0561],
        [ 0.0566,  0.0307,  0.0146,  ..., -0.0992, -0.0684,  0.0864],
        ...,
        [-0.0440,  0.3142,  0.0106,  ...,  0.0120,  0.0097, -0.0177],
        [-0.0196,  0.1364,  0.0320,  ...,  0.0068,  0.0452,  0.0844],
        [-0.0120,  0.1002, -0.0174,  ...,  0.0109, -0.0115,  0.0273]],
       device='cuda:0'), tensor([1, 3, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 4, 1, 4, 4, 1, 2, 3, 4, 4, 3, 3, 1,
        0, 3, 4, 4, 0, 0, 1, 3, 3, 4, 5, 4, 3, 4, 0, 0, 3, 0, 5, 4, 3, 2, 2, 1,
        0, 3, 0, 4, 4, 2, 1, 4, 1, 4, 0, 4, 2, 4, 4, 1], device='cuda:0')), (tensor([[-0.0096, -0.0315, -0.1168,  ..., -0.0025, -0.0277,  0.0574],
        [ 0.0326,  0.0491, -0.0541,  ..., -0.0201, -0.0287,  0.0681],
        [ 0.0018,  0.0934,  0.0273,  ...,  0.0021, -0.0255,  0.0509],
        ...,
        [ 0.0418,  0.0387,  0.0091,  ...,  0.1226,  0.0058,  0.0682],
        [ 0.0209,  0.0730, -0.0024,  ...,  0.0072, -0.0150,  0.0317],
        [-0.1812,  0.0069, -0.1384,  ...,  0.0064, -0.0248,  0.0437]],
       device='cuda:0'), tensor([0, 0, 2, 1, 4, 3, 2, 0, 0, 3, 5, 3, 1, 4, 0, 4, 4, 0, 1, 2, 4, 1, 1, 4,
        4, 0, 3, 4, 2, 4, 4, 4, 3, 4, 3, 2, 3, 0, 1, 3, 1, 3, 3, 0, 3, 0, 3, 4,
        6, 2, 0, 4, 2, 1, 1, 2, 3, 4, 1, 2, 1, 1, 0, 2], device='cuda:0')), (tensor([[ 1.6185e-03,  9.3331e-02, -7.7662e-03,  ..., -7.7613e-03,
         -1.8951e-02,  5.2354e-02],
        [-9.3014e-02,  2.0253e-01, -5.4475e-02,  ...,  5.8678e-03,
         -2.5757e-02,  4.6477e-02],
        [-1.6595e-02, -9.2448e-04, -1.1018e-01,  ...,  1.1235e-03,
         -1.9505e-02,  5.1888e-02],
        ...,
        [-1.4879e-02,  8.1868e-02, -1.3649e-02,  ...,  1.1771e+00,
          3.0827e+00, -2.1433e+00],
        [-3.0031e-02,  1.3951e-01, -4.7153e-02,  ..., -2.0900e-02,
          9.4316e-03,  2.8158e-02],
        [ 5.6731e-02,  6.6163e-02, -3.5455e-02,  ...,  1.3550e-02,
         -1.8451e-02,  3.0814e-02]], device='cuda:0'), tensor([3, 2, 3, 4, 4, 0, 2, 1, 0, 3, 6, 4, 6, 3, 0, 4, 4, 3, 0, 2, 1, 6, 0, 2,
        0, 1, 3, 4, 6, 2, 0, 4, 0, 2, 3, 2, 4, 0, 2, 4, 0, 0, 0, 1, 4, 2, 2, 2,
        3, 0, 1, 3, 3, 1, 1, 0, 0, 0, 0, 0, 4, 5, 1, 3], device='cuda:0')), (tensor([[ 6.4612e-03,  1.1920e-01, -1.0292e-01,  ...,  1.4127e-03,
         -3.1492e-02,  5.2216e-02],
        [-2.7253e-02,  9.0454e-02,  8.3104e-03,  ...,  9.7233e-03,
         -1.2224e-02,  2.8476e-02],
        [-2.2323e-02,  2.8834e-01, -5.5584e-02,  ...,  3.5565e-04,
         -1.7522e-02,  4.2427e-02],
        ...,
        [-3.5111e-02,  1.3197e-01,  1.3826e-03,  ...,  2.0196e-02,
          1.5819e-02,  3.0500e-02],
        [-1.3975e-02,  8.9138e-02, -4.5269e-02,  ...,  2.2197e-01,
         -9.3527e-03,  3.0046e-02],
        [-2.6749e-02,  1.1854e-01, -1.3483e-01,  ...,  2.0060e-01,
          4.7082e-01, -5.7762e-02]], device='cuda:0'), tensor([1, 1, 1, 3, 4, 2, 0, 4, 6, 6, 5, 4, 4, 4, 2, 2, 1, 1, 0, 2, 4, 2, 4, 2,
        4, 1, 0, 1, 5, 1, 3, 2, 0, 1, 4, 3, 0, 3, 2, 3, 3, 3, 4, 4, 2, 2, 2, 2,
        4, 4, 3, 2, 3, 4, 2, 2, 0, 4, 3, 2, 0, 4, 2, 4], device='cuda:0')), (tensor([[-0.0557,  0.1550, -0.0075,  ..., -0.0074, -0.0271,  0.0486],
        [ 0.0222,  0.0029, -0.0348,  ..., -0.0999, -0.0666,  0.0725],
        [-0.0008,  0.0265, -0.0074,  ..., -0.0061, -0.0328,  0.0465],
        ...,
        [ 0.1103,  0.0459, -0.0882,  ...,  0.0022, -0.0232,  0.0364],
        [ 0.1152,  0.0328,  0.0387,  ...,  0.0039, -0.0260,  0.0420],
        [-0.0050,  0.0549, -0.0263,  ...,  0.0050, -0.0224,  0.0476]],
       device='cuda:0'), tensor([4, 3, 3, 3, 4, 2, 0, 3, 1, 5, 0, 0, 6, 0, 1, 0, 2, 3, 3, 3, 4, 6, 1, 4,
        4, 0, 4, 2, 1, 5, 3, 1, 1, 2, 1, 3, 1, 1, 3, 2, 4, 2, 1, 0, 6, 4, 1, 1,
        6, 2, 2, 4, 1, 2, 6, 2, 2, 0, 3, 0, 2, 1, 0, 2], device='cuda:0')), (tensor([[ 0.0508,  0.0372, -0.0752,  ...,  0.0067, -0.0176,  0.0306],
        [-0.0279,  0.0663, -0.0692,  ..., -0.0589, -0.0141,  0.1055],
        [ 0.0621,  0.1316, -0.0674,  ...,  0.2665,  0.2801, -0.3058],
        ...,
        [-0.0363,  0.1130, -0.0945,  ...,  0.0028, -0.0243,  0.0487],
        [-0.1921,  0.1589, -0.1061,  ..., -0.0057,  0.0042,  0.0445],
        [ 0.0359,  0.1853, -0.0754,  ..., -0.0147, -0.0358,  0.0512]],
       device='cuda:0'), tensor([1, 3, 0, 2, 4, 1, 1, 6, 0, 6, 6, 4, 0, 2, 5, 0, 2, 3, 4, 4, 4, 1, 1, 4,
        4, 4, 3, 2, 1, 1, 4, 1, 1, 0, 3, 2, 3, 2, 4, 1, 1, 0, 0, 2, 4, 2, 4, 3,
        4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 6, 3, 0, 4, 4, 1], device='cuda:0')), (tensor([[ 0.0884,  0.1336,  0.0021,  ...,  0.0075, -0.0148,  0.0299],
        [-0.0646,  0.1837, -0.0285,  ...,  0.0541, -0.0552,  0.0791],
        [-0.0285,  0.0531, -0.1172,  ..., -0.0008, -0.0318,  0.0573],
        ...,
        [-0.0410, -0.0081,  0.0342,  ...,  0.0080, -0.0136,  0.0294],
        [-0.0481, -0.0318, -0.1004,  ..., -0.0096, -0.0627,  0.0660],
        [-0.0482,  0.0467, -0.1357,  ..., -0.0113, -0.0328,  0.0646]],
       device='cuda:0'), tensor([2, 0, 2, 2, 4, 2, 2, 0, 3, 2, 1, 4, 2, 0, 0, 3, 3, 4, 3, 0, 0, 3, 3, 3,
        0, 1, 3, 1, 0, 4, 0, 0, 0, 4, 4, 4, 1, 1, 1, 0, 0, 2, 3, 1, 4, 3, 0, 4,
        0, 4, 1, 1, 0, 0, 0, 6, 3, 1, 4, 1, 1, 2, 2, 3], device='cuda:0')), (tensor([[-0.1149, -0.0520, -0.1941,  ...,  0.0026,  0.0345,  0.1435],
        [ 0.0031,  0.0159, -0.0573,  ..., -0.0300, -0.0887,  0.0868],
        [-0.0752,  0.2605, -0.0242,  ...,  0.0091, -0.0192,  0.0326],
        ...,
        [-0.0004,  0.1100,  0.0060,  ...,  0.0071, -0.0244,  0.0349],
        [-0.0209,  0.1341, -0.0293,  ...,  0.0103, -0.0089,  0.0360],
        [-0.0793,  0.1842, -0.0575,  ...,  0.0065, -0.0497,  0.0714]],
       device='cuda:0'), tensor([4, 3, 4, 4, 4, 0, 4, 0, 4, 1, 3, 0, 1, 1, 0, 1, 1, 0, 1, 0, 3, 4, 4, 4,
        0, 0, 4, 4, 1, 2, 3, 1, 2, 0, 3, 3, 6, 0, 3, 2, 2, 1, 1, 2, 0, 5, 3, 0,
        4, 1, 1, 4, 2, 0, 3, 2, 0, 2, 3, 0, 4, 1, 0, 1], device='cuda:0')), (tensor([[-0.0427,  0.0886, -0.0109,  ..., -0.1005,  0.1080,  0.0136],
        [ 0.0411,  0.0780, -0.0527,  ...,  0.0084, -0.0203,  0.0298],
        [-0.0503,  0.0751, -0.0544,  ..., -0.0004, -0.0251,  0.0463],
        ...,
        [-0.0495,  0.0117,  0.0041,  ..., -0.0423, -0.0358,  0.1194],
        [-0.0449,  0.0695,  0.0206,  ...,  0.0096, -0.0124,  0.0288],
        [ 0.0383,  0.1584,  0.0498,  ...,  0.0114, -0.0234,  0.0309]],
       device='cuda:0'), tensor([4, 0, 3, 4, 3, 0, 2, 3, 0, 4, 1, 1, 4, 4, 0, 1, 4, 1, 3, 1, 3, 2, 2, 2,
        3, 1, 0, 1, 4, 1, 6, 6, 1, 0, 2, 0, 6, 0, 0, 1, 1, 6, 1, 3, 2, 1, 0, 0,
        1, 2, 4, 1, 4, 0, 3, 2, 0, 4, 2, 3, 1, 2, 0, 0], device='cuda:0')), (tensor([[ 1.9185e-02,  4.9387e-02, -4.2175e-02,  ...,  6.7770e-01,
          1.8893e+00, -1.5235e+00],
        [ 5.0581e-02,  9.7123e-02,  1.8466e-02,  ..., -6.8316e-04,
         -2.7429e-02,  4.9399e-02],
        [ 7.2421e-03,  5.1601e-02, -6.8303e-02,  ..., -6.3905e-04,
         -1.8221e-02,  5.0450e-02],
        ...,
        [-6.8169e-02,  2.1295e-02, -1.9408e-02,  ...,  1.6228e-03,
         -3.8028e-02,  7.1445e-02],
        [ 1.8231e-03,  7.7965e-02, -4.8321e-03,  ..., -1.3312e-03,
         -2.6328e-02,  4.9965e-02],
        [-6.2165e-03,  9.7178e-03, -6.3684e-02,  ..., -5.6861e-04,
         -2.1043e-02,  4.9115e-02]], device='cuda:0'), tensor([5, 0, 3, 2, 4, 1, 4, 2, 2, 6, 2, 4, 1, 2, 2, 4, 6, 1, 4, 3, 6, 2, 4, 1,
        0, 2, 0, 3, 1, 1, 2, 1, 4, 3, 0, 3, 0, 1, 4, 0, 3, 2, 1, 1, 0, 0, 1, 2,
        2, 2, 0, 2, 6, 1, 1, 1, 4, 4, 0, 0, 2, 3, 3, 3], device='cuda:0')), (tensor([[-0.1076,  0.0939, -0.0955,  ...,  0.0048, -0.0295,  0.0459],
        [-0.0746,  0.0623, -0.1055,  ...,  0.0067, -0.0156,  0.0267],
        [ 0.0017,  0.1417,  0.0289,  ..., -0.0058, -0.0313,  0.0657],
        ...,
        [ 0.0525, -0.0216, -0.0425,  ..., -0.0022, -0.0445,  0.0558],
        [ 0.0765, -0.0287,  0.0517,  ...,  0.0039, -0.0174,  0.0364],
        [ 0.0139,  0.0426, -0.0302,  ..., -0.0106, -0.0380,  0.0662]],
       device='cuda:0'), tensor([4, 4, 2, 2, 0, 4, 1, 2, 1, 2, 0, 2, 4, 5, 4, 3, 4, 3, 4, 1, 6, 0, 4, 4,
        2, 3, 0, 4, 1, 4, 4, 2, 1, 1, 2, 3, 4, 2, 2, 1, 0, 0, 4, 4, 1, 1, 1, 0,
        5, 4, 2, 0, 1, 1, 3, 0, 3, 4, 0, 0, 0, 6, 4, 0], device='cuda:0')), (tensor([[ 0.0011,  0.1563, -0.0717,  ...,  0.0104, -0.0131,  0.0290],
        [ 0.1157,  0.0807,  0.1264,  ...,  0.0274,  0.0302, -0.0543],
        [ 0.0251,  0.0324, -0.0318,  ..., -0.0787, -0.0955,  0.1085],
        ...,
        [ 0.0201,  0.0974, -0.0933,  ...,  0.0015, -0.0163,  0.0470],
        [-0.0638,  0.1321,  0.0433,  ...,  0.0058, -0.0240,  0.0338],
        [-0.0009,  0.0503, -0.0563,  ..., -0.0542, -0.0254,  0.1250]],
       device='cuda:0'), tensor([3, 0, 6, 1, 4, 3, 1, 2, 2, 2, 1, 4, 1, 1, 2, 0, 1, 3, 1, 5, 3, 4, 3, 1,
        1, 6, 1, 2, 4, 5, 1, 2, 2, 2, 4, 3, 3, 4, 0, 3, 4, 3, 4, 4, 1, 4, 2, 4,
        2, 6, 2, 1, 2, 4, 0, 4, 3, 0, 1, 0, 2, 2, 4, 3], device='cuda:0')), (tensor([[ 8.6867e-03,  4.6881e-02, -3.4456e-02,  ...,  7.7953e-03,
         -1.5318e-02,  4.4974e-02],
        [ 9.3506e-03,  3.7840e-02, -3.1608e-03,  ...,  1.0467e-02,
         -1.5992e-02,  2.9042e-02],
        [ 2.0385e-02, -9.6790e-05, -3.4298e-02,  ..., -2.8431e-02,
         -5.2583e-02,  7.1410e-02],
        ...,
        [-1.4361e-01,  1.6674e-01,  2.1269e-02,  ...,  8.8059e-03,
         -1.4215e-02,  2.8900e-02],
        [ 4.6637e-02, -3.8079e-03, -7.5847e-02,  ...,  3.2664e-02,
         -2.3546e-02,  7.7606e-02],
        [-9.2808e-03,  4.6603e-02, -2.9132e-02,  ..., -6.1481e-02,
         -6.8429e-02,  1.3984e-01]], device='cuda:0'), tensor([0, 4, 0, 0, 1, 2, 2, 0, 1, 4, 3, 3, 1, 1, 0, 1, 4, 1, 0, 0, 1, 4, 1, 0,
        1, 4, 1, 4, 0, 3, 4, 0, 1, 2, 0, 2, 1, 3, 4, 0, 1, 0, 4, 2, 2, 4, 4, 2,
        0, 2, 4, 0, 4, 3, 1, 0, 1, 1, 2, 4, 1, 4, 0, 2], device='cuda:0')), (tensor([[-0.0050,  0.1137, -0.0373,  ...,  0.0106, -0.0245,  0.0336],
        [ 0.0059,  0.0166, -0.0616,  ...,  0.0527,  0.1437,  0.0450],
        [ 0.0763,  0.0352,  0.0223,  ...,  0.0068, -0.0191,  0.0313],
        ...,
        [-0.0225,  0.1057, -0.0732,  ...,  0.0020, -0.0320,  0.0402],
        [-0.0268,  0.0463, -0.0317,  ..., -0.0021, -0.0208,  0.0467],
        [ 0.0555, -0.0009, -0.0127,  ..., -0.0174, -0.0287,  0.0469]],
       device='cuda:0'), tensor([0, 4, 3, 3, 0, 2, 0, 4, 4, 1, 3, 2, 2, 0, 4, 0, 4, 3, 1, 4, 3, 4, 2, 0,
        2, 4, 4, 6, 4, 2, 2, 0, 2, 4, 0, 0, 1, 1, 4, 1, 0, 2, 2, 1, 0, 1, 3, 0,
        3, 4, 3, 4, 0, 3, 2, 6, 2, 0, 2, 1, 2, 0, 3, 0], device='cuda:0')), (tensor([[-9.6437e-02,  1.0968e-01, -6.0315e-02,  ..., -2.1254e-02,
         -3.6188e-02,  7.9320e-02],
        [ 8.8890e-02,  2.1948e-01, -6.9920e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-2.1939e-03,  1.8104e-02, -9.9436e-02,  ..., -8.5658e-05,
         -3.1805e-02,  5.4189e-02],
        ...,
        [ 1.4964e-01,  6.5374e-02, -7.2703e-03,  ...,  9.2651e-03,
         -1.3624e-02,  2.8511e-02],
        [ 3.1219e-02,  9.2653e-02, -3.8303e-02,  ..., -6.5706e-04,
         -3.0918e-02,  5.2118e-02],
        [ 2.7884e-02, -1.1035e-02, -8.2995e-02,  ...,  2.0585e-03,
         -2.7830e-02,  5.5290e-02]], device='cuda:0'), tensor([1, 1, 2, 2, 0, 3, 1, 6, 3, 1, 1, 3, 4, 2, 6, 2, 3, 4, 0, 4, 6, 2, 2, 1,
        3, 2, 4, 4, 2, 2, 2, 2, 2, 3, 2, 3, 1, 1, 1, 2, 3, 3, 5, 0, 5, 0, 0, 4,
        2, 1, 1, 2, 2, 1, 2, 0, 3, 1, 4, 1, 0, 4, 0, 2], device='cuda:0')), (tensor([[-0.0252,  0.1568,  0.0574,  ..., -0.0113, -0.0281,  0.0440],
        [ 0.0206, -0.0241, -0.1378,  ...,  0.0057, -0.0130,  0.0298],
        [-0.0088,  0.0443, -0.1379,  ...,  0.0098, -0.0130,  0.0281],
        ...,
        [-0.1063,  0.2282,  0.0052,  ...,  0.1588,  0.0742, -0.1078],
        [ 0.0075,  0.0331, -0.0342,  ..., -0.1120, -0.1569,  0.1190],
        [-0.0402,  0.1122, -0.0165,  ...,  0.0016, -0.0185,  0.0364]],
       device='cuda:0'), tensor([1, 4, 1, 0, 2, 2, 3, 2, 1, 4, 4, 4, 3, 3, 1, 1, 6, 3, 0, 1, 3, 0, 1, 3,
        4, 1, 0, 4, 4, 0, 1, 0, 3, 4, 0, 4, 2, 2, 4, 4, 1, 4, 4, 0, 1, 3, 1, 2,
        0, 0, 1, 0, 4, 0, 6, 3, 4, 1, 4, 3, 1, 4, 1, 3], device='cuda:0')), (tensor([[-0.0086,  0.0357, -0.0708,  ..., -0.0016, -0.0238,  0.0481],
        [-0.1142,  0.0496, -0.0014,  ..., -0.0193, -0.0558,  0.0798],
        [ 0.0483,  0.0181, -0.0085,  ..., -0.0354, -0.0441,  0.0716],
        ...,
        [-0.0491,  0.1099, -0.0014,  ...,  0.0103, -0.0124,  0.0281],
        [-0.1565,  0.1518, -0.1008,  ...,  0.0049, -0.0180,  0.0526],
        [ 0.0416, -0.0009, -0.0230,  ...,  0.2410,  0.2280, -0.3430]],
       device='cuda:0'), tensor([3, 1, 2, 0, 4, 2, 4, 1, 1, 2, 1, 2, 0, 6, 1, 1, 1, 2, 0, 3, 1, 1, 0, 3,
        0, 3, 2, 3, 3, 1, 0, 0, 2, 4, 3, 1, 1, 0, 4, 4, 3, 5, 6, 0, 2, 4, 0, 0,
        6, 0, 4, 6, 3, 4, 3, 3, 4, 4, 4, 1, 4, 1, 2, 6], device='cuda:0')), (tensor([[-0.0610,  0.2462, -0.0382,  ..., -0.1364, -0.1185,  0.1603],
        [-0.0312,  0.1162, -0.0024,  ..., -0.0141, -0.0419,  0.0503],
        [-0.0335,  0.0982, -0.0741,  ..., -0.0016, -0.0234,  0.0558],
        ...,
        [-0.0564,  0.0382, -0.1254,  ..., -0.0555, -0.0480,  0.1236],
        [-0.0278,  0.0129, -0.1077,  ...,  0.0070, -0.0219,  0.0665],
        [ 0.2113,  0.0351,  0.1200,  ...,  0.0068, -0.0135,  0.1154]],
       device='cuda:0'), tensor([2, 2, 4, 0, 4, 0, 2, 2, 2, 1, 3, 2, 3, 4, 3, 3, 2, 0, 4, 1, 1, 0, 1, 2,
        4, 0, 0, 4, 1, 0, 1, 2, 2, 1, 1, 4, 4, 3, 1, 1, 0, 1, 3, 0, 1, 3, 1, 1,
        0, 6, 3, 0, 2, 1, 3, 3, 2, 3, 4, 4, 1, 3, 2, 4], device='cuda:0')), (tensor([[ 0.0218,  0.0423, -0.0006,  ...,  0.0625,  0.0732,  0.0155],
        [ 0.0252, -0.0290, -0.0738,  ..., -0.0548, -0.0924,  0.1060],
        [ 0.0213,  0.1481, -0.0911,  ...,  0.0059, -0.0124,  0.0375],
        ...,
        [-0.0099,  0.0264, -0.0966,  ..., -0.0100, -0.0253,  0.0750],
        [-0.0979,  0.1679, -0.0862,  ...,  0.0988,  0.0631, -0.0685],
        [-0.0091,  0.1422, -0.0224,  ...,  0.0024, -0.0228,  0.0541]],
       device='cuda:0'), tensor([0, 2, 0, 6, 1, 0, 1, 1, 1, 0, 2, 0, 0, 4, 0, 1, 2, 0, 5, 3, 4, 4, 0, 0,
        4, 1, 1, 1, 2, 3, 3, 4, 3, 4, 1, 0, 2, 2, 1, 4, 4, 3, 0, 3, 0, 4, 0, 0,
        0, 2, 0, 0, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 1, 4], device='cuda:0')), (tensor([[ 0.0137,  0.0413,  0.0059,  ...,  0.3350,  0.0912,  0.0426],
        [ 0.0354,  0.1568, -0.0116,  ...,  0.0055, -0.0253,  0.0313],
        [ 0.1241,  0.0803, -0.0577,  ...,  0.0312, -0.0120,  0.0321],
        ...,
        [ 0.1658,  0.0713, -0.0256,  ..., -0.0171, -0.0319,  0.0477],
        [-0.0335, -0.0045, -0.0737,  ...,  0.0112, -0.0139,  0.0269],
        [ 0.0354,  0.0821, -0.0328,  ...,  0.0081, -0.0210,  0.0336]],
       device='cuda:0'), tensor([1, 2, 0, 0, 4, 4, 5, 2, 4, 0, 2, 2, 1, 3, 3, 1, 1, 3, 4, 0, 0, 4, 3, 0,
        2, 0, 0, 3, 0, 4, 3, 1, 4, 2, 4, 0, 2, 1, 2, 1, 3, 3, 1, 3, 2, 4, 2, 1,
        3, 3, 4, 0, 0, 0, 3, 2, 0, 1, 4, 2, 2, 2, 1, 2], device='cuda:0')), (tensor([[ 0.0178,  0.2126, -0.0125,  ..., -0.0376, -0.0627,  0.0716],
        [ 0.0427,  0.0026, -0.0411,  ..., -0.0070, -0.0105,  0.0371],
        [-0.0395,  0.1842,  0.0540,  ..., -0.0098, -0.0408,  0.0506],
        ...,
        [ 0.0737,  0.0982, -0.1319,  ...,  0.1415,  0.2605, -0.2643],
        [ 0.0187,  0.0563, -0.0169,  ...,  0.0117, -0.0204,  0.0338],
        [ 0.0252,  0.0737, -0.0330,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([2, 1, 2, 2, 2, 4, 2, 3, 0, 4, 2, 6, 6, 1, 1, 3, 2, 1, 3, 4, 1, 4, 0, 1,
        0, 0, 1, 3, 3, 4, 6, 2, 4, 3, 0, 2, 1, 5, 2, 1, 0, 2, 3, 2, 2, 0, 0, 4,
        1, 4, 0, 1, 2, 4, 6, 2, 1, 0, 4, 2, 2, 4, 6, 1], device='cuda:0')), (tensor([[-0.0449,  0.0294, -0.0079,  ...,  0.0662,  0.0460,  0.0836],
        [ 0.0503,  0.0921, -0.0922,  ...,  0.0073, -0.0161,  0.0301],
        [-0.1406,  0.2214, -0.0543,  ...,  0.0042, -0.0176,  0.0370],
        ...,
        [ 0.0193,  0.0340, -0.0846,  ...,  0.0082, -0.0208,  0.0366],
        [ 0.0130,  0.0753, -0.1414,  ...,  0.0086, -0.0120,  0.0340],
        [ 0.0418,  0.0163, -0.0384,  ...,  0.4403,  1.3764, -1.1200]],
       device='cuda:0'), tensor([3, 2, 1, 0, 4, 2, 1, 4, 4, 3, 4, 0, 2, 2, 3, 0, 2, 0, 4, 0, 0, 2, 4, 4,
        3, 1, 1, 2, 4, 1, 3, 4, 4, 2, 3, 0, 2, 3, 5, 4, 2, 0, 2, 1, 2, 3, 3, 1,
        3, 2, 4, 0, 4, 2, 3, 4, 0, 2, 4, 0, 1, 4, 0, 5], device='cuda:0')), (tensor([[-0.0114,  0.1805, -0.0490,  ...,  0.0391,  0.0166,  0.0306],
        [-0.0030,  0.0525, -0.0566,  ..., -0.0021, -0.0185,  0.0547],
        [ 0.0906,  0.2625,  0.0957,  ..., -0.0149, -0.0295,  0.0455],
        ...,
        [-0.1140,  0.0448, -0.1207,  ...,  0.0017, -0.0316,  0.0553],
        [ 0.0415,  0.0147,  0.0717,  ...,  0.0112, -0.0112,  0.0269],
        [-0.0719,  0.1647, -0.1424,  ..., -0.0433, -0.0680,  0.1039]],
       device='cuda:0'), tensor([1, 3, 0, 1, 4, 1, 2, 3, 4, 1, 0, 0, 1, 2, 4, 2, 6, 5, 2, 0, 4, 1, 4, 1,
        3, 0, 3, 1, 0, 0, 1, 0, 2, 1, 2, 1, 2, 4, 3, 5, 4, 6, 1, 1, 1, 0, 4, 2,
        2, 2, 0, 1, 1, 4, 0, 4, 3, 3, 3, 2, 2, 2, 4, 1], device='cuda:0')), (tensor([[ 0.0073,  0.0094,  0.0259,  ...,  0.0136, -0.0063,  0.0267],
        [-0.1807,  0.1721,  0.0121,  ..., -0.0387, -0.0551,  0.0711],
        [-0.0372,  0.0005, -0.0607,  ..., -0.0162, -0.0385,  0.0661],
        ...,
        [ 0.0210,  0.0649, -0.0411,  ..., -0.0316, -0.0563,  0.0841],
        [ 0.0462,  0.2468, -0.0278,  ..., -0.0079, -0.0235,  0.0435],
        [-0.0192, -0.0161, -0.0170,  ..., -0.0013, -0.0319,  0.0603]],
       device='cuda:0'), tensor([1, 4, 4, 0, 1, 6, 3, 3, 2, 1, 2, 4, 0, 0, 0, 4, 1, 3, 2, 4, 2, 3, 4, 1,
        1, 1, 4, 3, 2, 1, 4, 3, 0, 2, 1, 2, 1, 1, 0, 0, 3, 6, 6, 0, 2, 2, 0, 2,
        2, 1, 1, 3, 4, 2, 0, 1, 4, 0, 1, 2, 0, 1, 1, 3], device='cuda:0')), (tensor([[-0.0856,  0.1099,  0.0232,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0081, -0.0519, -0.1125,  ..., -0.0030, -0.0329,  0.0604],
        [ 0.1527,  0.1166, -0.0410,  ..., -0.0358, -0.0394,  0.0795],
        ...,
        [-0.0881,  0.0877, -0.0752,  ...,  0.0073, -0.0110,  0.0314],
        [ 0.0153,  0.0605, -0.0288,  ..., -0.0141, -0.1334,  0.1444],
        [ 0.1352,  0.1297,  0.0872,  ...,  0.0069, -0.0127,  0.0298]],
       device='cuda:0'), tensor([0, 3, 0, 2, 1, 1, 3, 4, 4, 2, 4, 3, 1, 0, 6, 0, 3, 3, 3, 4, 1, 0, 2, 1,
        0, 2, 1, 1, 2, 3, 1, 2, 3, 0, 1, 4, 1, 3, 4, 0, 0, 2, 4, 6, 3, 2, 4, 4,
        4, 6, 1, 4, 1, 0, 6, 4, 4, 4, 1, 0, 4, 0, 4, 0], device='cuda:0')), (tensor([[-0.0081, -0.0099, -0.1044,  ...,  0.0050, -0.0149,  0.0493],
        [-0.0948,  0.0835, -0.1297,  ..., -0.0183, -0.0377,  0.0715],
        [-0.1390,  0.1468, -0.0651,  ...,  0.0106, -0.0130,  0.0277],
        ...,
        [-0.0050,  0.0431, -0.0258,  ..., -0.0120, -0.0389,  0.0467],
        [-0.1136,  0.1414,  0.0224,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0647,  0.0442, -0.0908,  ..., -0.0110, -0.0367,  0.0649]],
       device='cuda:0'), tensor([3, 0, 1, 0, 0, 1, 1, 0, 0, 1, 3, 3, 2, 4, 1, 1, 0, 3, 0, 2, 2, 3, 6, 6,
        0, 4, 4, 0, 6, 2, 2, 4, 1, 2, 2, 2, 2, 4, 3, 1, 0, 3, 3, 2, 3, 1, 1, 6,
        3, 2, 4, 3, 3, 6, 4, 1, 4, 4, 0, 0, 6, 6, 1, 0], device='cuda:0')), (tensor([[ 3.7301e-02,  1.5206e-02, -1.9952e-03,  ..., -5.2791e-02,
         -1.6750e-01,  1.6512e-01],
        [-2.3693e-02,  1.8083e-01, -7.6987e-02,  ..., -3.6004e-02,
          1.7315e-03,  3.0242e-02],
        [-2.0115e-01,  1.2219e-01, -5.9315e-02,  ..., -1.5217e-02,
         -3.4003e-02,  6.4163e-02],
        ...,
        [ 4.7389e-02,  1.1186e-01, -1.0983e-01,  ...,  1.8284e-01,
          5.9582e-02,  5.2992e-02],
        [-7.9555e-02,  3.3491e-01,  7.1591e-02,  ...,  1.3940e-01,
         -1.3574e-02,  3.8455e-02],
        [ 1.7472e-02,  1.6147e-02, -1.5108e-02,  ...,  1.7645e+00,
          3.6516e+00, -2.0769e+00]], device='cuda:0'), tensor([6, 4, 0, 3, 0, 0, 3, 3, 4, 4, 2, 6, 0, 4, 0, 3, 0, 2, 0, 0, 3, 4, 3, 3,
        2, 0, 0, 4, 0, 4, 1, 1, 2, 1, 3, 2, 2, 2, 1, 4, 0, 4, 2, 2, 1, 3, 0, 2,
        2, 1, 3, 2, 3, 2, 0, 3, 1, 1, 1, 1, 4, 1, 1, 5], device='cuda:0')), (tensor([[ 0.1458,  0.0796,  0.0312,  ...,  0.0098, -0.0112,  0.0253],
        [ 0.0957,  0.0042,  0.0165,  ...,  0.0068, -0.0252,  0.0605],
        [-0.0723, -0.0386, -0.1303,  ...,  0.1023,  0.1257,  0.0702],
        ...,
        [-0.0738,  0.2203,  0.0806,  ..., -0.0348, -0.0098,  0.0170],
        [ 0.0086,  0.2327,  0.0092,  ...,  0.0058, -0.0233,  0.0284],
        [ 0.0015,  0.0528, -0.0636,  ...,  0.0569,  0.4088, -0.3989]],
       device='cuda:0'), tensor([1, 0, 4, 4, 4, 2, 2, 0, 4, 4, 3, 0, 3, 0, 4, 4, 0, 3, 6, 3, 2, 0, 4, 2,
        1, 6, 1, 2, 1, 0, 2, 1, 4, 4, 5, 0, 2, 0, 2, 4, 0, 0, 6, 0, 2, 3, 2, 3,
        4, 0, 5, 1, 2, 4, 2, 4, 0, 0, 1, 2, 1, 2, 4, 0], device='cuda:0')), (tensor([[ 4.6646e-02, -2.1858e-02,  3.5307e-02,  ...,  2.3550e-03,
         -1.6670e-02,  3.3785e-02],
        [ 2.6305e-02,  7.1226e-02, -1.2834e-02,  ..., -3.0386e-03,
         -3.9765e-02,  5.3922e-02],
        [ 5.5427e-02,  4.3651e-02, -4.1131e-02,  ..., -2.3088e-02,
         -4.3960e-02,  7.2413e-02],
        ...,
        [-4.5977e-02,  6.4218e-02, -1.1996e-01,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-9.8955e-02,  3.6576e-02, -2.0503e-01,  ..., -3.4161e-03,
         -4.2680e-02,  5.8983e-02],
        [-4.5883e-02, -8.2046e-05,  9.6757e-03,  ...,  6.3713e-03,
         -2.7509e-02,  3.6013e-02]], device='cuda:0'), tensor([1, 6, 4, 4, 0, 3, 2, 1, 0, 5, 3, 1, 4, 0, 3, 1, 2, 2, 4, 2, 1, 0, 4, 0,
        3, 2, 0, 0, 4, 0, 2, 0, 0, 0, 2, 4, 6, 3, 2, 2, 0, 0, 1, 6, 1, 4, 0, 0,
        1, 2, 6, 3, 4, 4, 1, 4, 2, 2, 0, 2, 0, 1, 2, 0], device='cuda:0')), (tensor([[-0.0626,  0.0698, -0.0834,  ..., -0.0319, -0.0268,  0.0910],
        [ 0.0220, -0.0173, -0.0099,  ..., -0.0031, -0.0191,  0.0499],
        [-0.0127,  0.2233, -0.0243,  ...,  0.0435,  0.0244,  0.0296],
        ...,
        [ 0.0174,  0.0058, -0.0072,  ...,  0.5349,  0.3462, -0.3668],
        [-0.0739,  0.1727,  0.0449,  ...,  0.0011, -0.0281,  0.0440],
        [-0.1150,  0.2478, -0.0489,  ...,  0.0106, -0.0119,  0.0274]],
       device='cuda:0'), tensor([3, 3, 2, 3, 1, 2, 5, 3, 1, 4, 0, 2, 4, 1, 6, 4, 3, 2, 4, 4, 2, 3, 1, 1,
        1, 4, 1, 1, 0, 4, 3, 4, 3, 2, 2, 2, 5, 2, 5, 2, 4, 3, 2, 1, 2, 0, 0, 6,
        0, 4, 3, 2, 2, 1, 4, 5, 4, 1, 0, 6, 2, 6, 4, 1], device='cuda:0')), (tensor([[ 0.1146,  0.1305, -0.0167,  ...,  0.1889,  0.1765, -0.1827],
        [-0.0421, -0.0710, -0.0730,  ..., -0.0343, -0.0263,  0.1268],
        [ 0.0249,  0.0540, -0.0482,  ...,  0.0089, -0.0221,  0.0323],
        ...,
        [-0.0503,  0.0848, -0.1153,  ..., -0.0319, -0.0608,  0.0865],
        [ 0.1184,  0.0788,  0.0981,  ...,  0.0277, -0.0092,  0.0612],
        [-0.0276,  0.0640, -0.0470,  ..., -0.0222,  0.1117, -0.0030]],
       device='cuda:0'), tensor([4, 0, 4, 2, 4, 2, 1, 3, 0, 1, 5, 0, 0, 4, 6, 3, 4, 4, 3, 1, 6, 1, 2, 4,
        1, 1, 2, 4, 2, 1, 2, 4, 2, 3, 2, 2, 3, 4, 0, 0, 0, 2, 6, 3, 4, 1, 4, 4,
        2, 3, 5, 4, 4, 1, 2, 4, 3, 0, 2, 0, 4, 4, 4, 4], device='cuda:0')), (tensor([[ 0.1108,  0.1198, -0.0586,  ...,  0.0091, -0.0139,  0.0287],
        [ 0.0847,  0.1523,  0.0311,  ...,  0.0112, -0.0112,  0.0269],
        [-0.0542, -0.0172, -0.0924,  ..., -0.0211, -0.0492,  0.1082],
        ...,
        [ 0.1028,  0.1178, -0.0160,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0080,  0.0653, -0.0541,  ...,  0.0164, -0.0726,  0.1884],
        [-0.0533,  0.1072,  0.0125,  ..., -0.0154, -0.0334,  0.0635]],
       device='cuda:0'), tensor([4, 1, 3, 3, 0, 0, 3, 1, 0, 2, 0, 0, 1, 4, 4, 5, 2, 1, 4, 3, 1, 2, 4, 4,
        1, 3, 1, 3, 2, 4, 3, 3, 1, 2, 2, 1, 6, 4, 2, 0, 4, 0, 2, 1, 3, 1, 2, 4,
        1, 4, 4, 2, 6, 1, 3, 4, 1, 4, 4, 4, 0, 4, 0, 0], device='cuda:0')), (tensor([[-0.0021,  0.0604,  0.0186,  ...,  0.2048,  0.1878, -0.0174],
        [ 0.0188,  0.0339, -0.0296,  ..., -0.0608, -0.1344,  0.1078],
        [ 0.0329,  0.0177, -0.0454,  ..., -0.0393, -0.0698,  0.0901],
        ...,
        [-0.0551,  0.2931, -0.0278,  ...,  0.0097, -0.0145,  0.0281],
        [-0.0673,  0.0996, -0.1080,  ...,  0.0086, -0.0140,  0.0291],
        [ 0.1211,  0.0948,  0.0666,  ...,  0.0100,  0.0594,  0.0405]],
       device='cuda:0'), tensor([4, 2, 0, 1, 1, 3, 4, 4, 3, 3, 3, 6, 2, 3, 0, 4, 2, 0, 1, 2, 4, 3, 4, 0,
        0, 4, 3, 1, 3, 1, 1, 3, 2, 6, 2, 3, 0, 3, 0, 3, 2, 2, 1, 2, 1, 3, 2, 0,
        3, 0, 3, 4, 2, 4, 2, 2, 1, 0, 2, 1, 2, 2, 4, 0], device='cuda:0')), (tensor([[-0.0169, -0.0037, -0.1036,  ..., -0.0017, -0.0281,  0.0651],
        [-0.0106,  0.0681, -0.0493,  ..., -0.0971, -0.1464,  0.1450],
        [ 0.0437,  0.0386, -0.0161,  ...,  0.0115, -0.0116,  0.0268],
        ...,
        [-0.0820,  0.1068, -0.0165,  ..., -0.0059, -0.0289,  0.0375],
        [-0.0603,  0.0616, -0.0252,  ..., -0.0033, -0.0421,  0.0803],
        [-0.0539,  0.1983,  0.0228,  ...,  0.0077, -0.0189,  0.0365]],
       device='cuda:0'), tensor([1, 0, 3, 4, 0, 2, 0, 4, 0, 4, 3, 4, 3, 0, 5, 3, 1, 0, 0, 4, 4, 2, 4, 3,
        1, 3, 4, 4, 0, 2, 2, 1, 2, 6, 4, 1, 1, 1, 4, 2, 3, 4, 3, 0, 1, 4, 2, 4,
        1, 3, 1, 2, 4, 2, 1, 3, 2, 4, 4, 4, 2, 2, 3, 0], device='cuda:0')), (tensor([[ 0.0240,  0.0767,  0.0250,  ...,  0.0062, -0.0204,  0.0363],
        [-0.0308,  0.0760, -0.0568,  ..., -0.0233,  0.0060,  0.0147],
        [-0.0140,  0.0450, -0.0705,  ...,  0.0009, -0.0225,  0.0547],
        ...,
        [ 0.0025,  0.0441, -0.0443,  ...,  0.0054, -0.0174,  0.0324],
        [-0.1266,  0.0603, -0.0130,  ..., -0.0003, -0.0267,  0.0568],
        [-0.0587,  0.0925, -0.1005,  ...,  0.0109, -0.0017,  0.0238]],
       device='cuda:0'), tensor([3, 2, 3, 2, 1, 6, 4, 1, 1, 0, 4, 0, 0, 0, 1, 3, 1, 2, 6, 0, 4, 1, 4, 0,
        0, 0, 2, 3, 1, 1, 2, 0, 1, 5, 3, 2, 1, 0, 4, 1, 6, 1, 4, 0, 1, 6, 0, 4,
        1, 3, 4, 4, 2, 3, 2, 1, 4, 1, 4, 4, 4, 2, 3, 1], device='cuda:0')), (tensor([[-0.0487,  0.0665, -0.0963,  ...,  0.0018, -0.0252,  0.0563],
        [-0.0536,  0.1262, -0.0743,  ...,  0.0020, -0.0326,  0.0436],
        [-0.0952,  0.0894, -0.1007,  ...,  0.0077, -0.0235,  0.0400],
        ...,
        [ 0.0483,  0.1216, -0.0275,  ...,  0.0115, -0.0108,  0.0266],
        [-0.0429,  0.0594, -0.0944,  ...,  0.0471,  0.1008,  0.0767],
        [-0.0502,  0.0728, -0.0550,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([2, 1, 1, 3, 4, 4, 4, 4], device='cuda:0'))], 'env0_out': [(tensor([[ 0.0339,  0.0167,  0.0217,  ..., -0.0224,  0.0433,  0.0286],
        [ 0.0238,  0.0234, -0.0422,  ...,  0.2072,  0.0261, -0.0733],
        [ 0.0600,  0.0138, -0.0310,  ...,  0.2237,  1.6991, -0.0885],
        ...,
        [ 0.0674,  0.0246,  0.0125,  ..., -0.0174, -0.0338,  0.0573],
        [ 0.0593,  0.0976,  0.0225,  ...,  0.0085, -0.0072,  0.0294],
        [ 0.0612,  0.0413, -0.0138,  ..., -0.0226, -0.0318,  0.0493]],
       device='cuda:0'), tensor([6, 6, 5, 0, 0, 6, 1, 2, 3, 6, 1, 5, 6, 0, 2, 2, 0, 0, 4, 6, 6, 1, 2, 6,
        4, 6, 3, 6, 2, 1, 0, 6, 0, 6, 2, 0, 5, 5, 0, 3, 1, 4, 4, 2, 2, 4, 5, 0,
        0, 1, 5, 6, 6, 0, 0, 1, 6, 0, 3, 2, 0, 4, 6, 2], device='cuda:0')), (tensor([[ 0.1144,  0.0300,  0.0270,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0340,  0.0900, -0.0648,  ..., -0.1103, -0.0917,  0.2550],
        [ 0.0706,  0.0540, -0.0155,  ...,  0.0073, -0.0134,  0.0295],
        ...,
        [-0.0012,  0.0115,  0.0242,  ...,  0.0310,  0.0063,  0.0536],
        [ 0.0236, -0.0241, -0.0017,  ...,  0.0112, -0.0112,  0.0275],
        [ 0.0682,  0.0874,  0.0941,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([6, 1, 0, 6, 4, 0, 6, 3, 6, 1, 0, 4, 5, 0, 6, 3, 2, 5, 4, 2, 2, 0, 5, 0,
        5, 4, 0, 6, 0, 6, 3, 5, 6, 2, 3, 4, 1, 0, 2, 2, 0, 5, 6, 4, 2, 0, 0, 2,
        1, 6, 2, 3, 6, 1, 1, 4, 0, 5, 2, 3, 6, 3, 0, 2], device='cuda:0')), (tensor([[ 0.0648,  0.0253, -0.0117,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0144,  0.0159, -0.0938,  ..., -0.0767, -0.0756,  0.1298],
        [ 0.0172,  0.0167, -0.0251,  ...,  1.8028,  4.6503, -2.2255],
        ...,
        [ 0.0374,  0.0836, -0.0059,  ...,  0.0136, -0.0114,  0.0246],
        [-0.0261,  0.1043, -0.0166,  ...,  0.0102, -0.0163,  0.0315],
        [ 0.0269,  0.0543, -0.0561,  ...,  0.0252,  0.0278,  0.0219]],
       device='cuda:0'), tensor([6, 1, 5, 0, 4, 6, 6, 0, 2, 0, 0, 6, 2, 2, 1, 0, 0, 1, 0, 2, 5, 6, 4, 1,
        2, 5, 3, 1, 5, 1, 4, 6, 4, 2, 5, 2, 5, 4, 0, 2, 1, 3, 5, 0, 1, 1, 1, 3,
        5, 5, 3, 0, 6, 0, 3, 6, 1, 6, 5, 3, 0, 4, 6, 6], device='cuda:0')), (tensor([[ 8.5795e-02,  3.8159e-02, -4.8276e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-2.5576e-03,  6.0580e-02,  4.0002e-02,  ...,  5.9085e-03,
         -2.4944e-02,  4.5127e-02],
        [ 3.0887e-02,  8.1545e-02, -1.1548e-02,  ...,  8.0957e-01,
          2.2995e+00, -9.7316e-01],
        ...,
        [ 2.5036e-02,  4.1713e-02, -3.1208e-02,  ..., -2.5164e-02,
         -6.8281e-02,  1.3167e-01],
        [ 3.7653e-02,  2.8452e-02,  4.2277e-03,  ..., -1.4648e-03,
         -7.1245e-03,  3.5891e-02],
        [ 5.2800e-02,  8.8366e-02, -1.2066e-02,  ..., -5.1246e-02,
         -6.0574e-02,  9.9472e-02]], device='cuda:0'), tensor([0, 1, 5, 0, 6, 5, 1, 2, 4, 3, 0, 0, 2, 3, 0, 6, 6, 0, 6, 2, 6, 6, 3, 1,
        0, 3, 2, 0, 1, 6, 5, 6, 2, 0, 6, 5, 6, 1, 2, 6, 0, 1, 6, 1, 1, 1, 6, 1,
        2, 1, 0, 4, 6, 5, 0, 1, 0, 3, 0, 3, 6, 6, 1, 2], device='cuda:0')), (tensor([[ 7.2054e-02,  5.3878e-02, -1.3299e-02,  ...,  3.4772e-04,
          9.8411e-03,  2.7529e-02],
        [ 3.0118e-02,  4.4466e-02, -5.9739e-02,  ...,  4.0760e-01,
          2.4984e+00, -1.1515e+00],
        [ 4.9283e-02,  7.4280e-02,  4.7767e-02,  ...,  3.2124e-04,
         -1.6901e-02,  4.3977e-02],
        ...,
        [ 4.0085e-02,  4.0060e-02, -1.4540e-02,  ..., -1.4383e-01,
         -1.5232e-01,  2.2126e-01],
        [ 1.1148e-01, -8.5905e-03, -1.9516e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [ 7.6457e-02,  7.6977e-03, -2.5185e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02]], device='cuda:0'), tensor([6, 5, 6, 0, 5, 2, 6, 6, 3, 4, 1, 5, 3, 5, 2, 1, 6, 6, 6, 4, 5, 1, 2, 1,
        4, 5, 5, 5, 6, 3, 6, 4, 4, 5, 0, 1, 2, 0, 0, 2, 6, 2, 3, 5, 1, 1, 4, 4,
        5, 6, 6, 0, 4, 3, 1, 1, 6, 5, 0, 2, 5, 0, 1, 4], device='cuda:0')), (tensor([[ 4.6873e-02,  8.5419e-03, -3.7546e-02,  ...,  6.3740e-04,
         -2.0141e-02,  3.4773e-02],
        [ 8.5793e-02, -2.3177e-02,  2.6282e-03,  ...,  1.4203e-02,
         -1.1442e-02,  1.1779e-01],
        [ 3.3155e-02,  5.0793e-02, -3.1501e-02,  ...,  3.4356e-01,
          2.1528e+00, -7.0357e-01],
        ...,
        [ 2.3202e-02,  2.9495e-02, -6.0807e-03,  ..., -1.8714e-02,
         -2.6583e-02,  6.6130e-02],
        [ 4.8359e-02,  5.4698e-02, -2.4785e-02,  ...,  2.3050e-01,
          2.5719e+00, -1.3808e+00],
        [ 2.8566e-02,  7.2863e-02, -6.2791e-02,  ..., -6.0857e-02,
         -2.5820e-02,  1.6537e-01]], device='cuda:0'), tensor([2, 6, 5, 1, 1, 2, 6, 0, 6, 4, 2, 4, 0, 4, 2, 6, 2, 2, 1, 1, 2, 5, 5, 1,
        4, 1, 1, 1, 2, 3, 0, 5, 1, 3, 0, 6, 4, 2, 6, 6, 3, 2, 3, 6, 4, 4, 6, 3,
        1, 5, 6, 3, 1, 0, 0, 2, 3, 5, 1, 6, 6, 1, 5, 1], device='cuda:0')), (tensor([[ 0.0071,  0.0160, -0.0678,  ...,  0.2093,  0.1947, -0.1427],
        [ 0.0431,  0.0548, -0.0373,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0378,  0.0263,  0.0391,  ...,  0.0096, -0.0140,  0.0320],
        ...,
        [ 0.0271,  0.0459,  0.0096,  ...,  0.5640,  0.9156, -0.6019],
        [ 0.0382,  0.0722,  0.0055,  ...,  0.2455,  0.1371,  0.0328],
        [ 0.0071,  0.0256, -0.0458,  ...,  0.0121, -0.0233,  0.0287]],
       device='cuda:0'), tensor([6, 1, 3, 5, 1, 5, 2, 0, 3, 5, 2, 6, 4, 4, 5, 0, 1, 5, 0, 3, 1, 0, 5, 6,
        1], device='cuda:0'))], 'env1_out': [(tensor([[-2.1496e-02,  5.8302e-02,  1.6637e-02,  ...,  8.6356e-03,
         -3.3103e-02,  3.7461e-02],
        [-1.3262e-02,  1.3731e-02,  1.5126e-01,  ...,  6.9256e-03,
         -1.6977e-02,  3.1890e-02],
        [ 5.5942e-02,  5.6814e-02, -3.0967e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        ...,
        [ 3.4953e-02, -3.6698e-03, -7.8303e-02,  ...,  1.0769e+00,
          2.4831e+00, -7.8106e-01],
        [ 6.8213e-02, -2.2084e-03, -3.9003e-02,  ...,  2.3707e-01,
          4.6604e-01, -5.0944e-01],
        [ 1.9441e-02,  3.8956e-02, -3.0356e-02,  ...,  6.8213e-03,
         -1.6133e-02,  2.8657e-02]], device='cuda:0'), tensor([2, 1, 6, 5, 0, 6, 1, 6, 1, 5, 5, 1, 2, 1, 6, 2, 6, 1, 1, 3, 2, 1, 4, 6,
        1, 1, 4, 1, 1, 2, 4, 6, 0, 1, 1, 6, 6, 2, 2, 6, 1, 5, 2, 1, 0, 6, 2, 4,
        4, 4, 2, 6, 2, 4, 1, 4, 6, 0, 1, 0, 1, 5, 6, 4], device='cuda:0')), (tensor([[ 0.0477,  0.0865, -0.0362,  ...,  0.0073, -0.0162,  0.0302],
        [ 0.0258,  0.1203,  0.0228,  ...,  0.0057, -0.0170,  0.0422],
        [ 0.0369,  0.0602, -0.0336,  ...,  0.0109, -0.0113,  0.0268],
        ...,
        [-0.0375, -0.0441, -0.0893,  ...,  0.0105, -0.0111,  0.0271],
        [ 0.0873, -0.0026, -0.0339,  ...,  0.0165, -0.0231,  0.0494],
        [ 0.0945,  0.0723,  0.0412,  ..., -0.0018, -0.0301,  0.0440]],
       device='cuda:0'), tensor([4, 1, 0, 5, 0, 1, 1, 2, 5, 2, 2, 5, 6, 2, 0, 2, 2, 1, 4, 2, 4, 4, 1, 1,
        6, 4, 2, 1, 6, 0, 5, 2, 1, 4, 0, 2, 0, 4, 2, 6, 5, 5, 2, 0, 2, 6, 1, 0,
        6, 0, 2, 1, 0, 1, 5, 4, 2, 2, 1, 5, 0, 0, 0, 1], device='cuda:0')), (tensor([[ 0.0080,  0.0632, -0.0524,  ...,  0.0107, -0.0119,  0.0288],
        [ 0.0326,  0.0268,  0.0169,  ..., -0.0805, -0.1778,  0.0744],
        [ 0.0323,  0.0139,  0.0231,  ...,  0.0821,  0.0508,  0.0202],
        ...,
        [ 0.0292,  0.0302, -0.0279,  ...,  0.0110, -0.0113,  0.0270],
        [ 0.1187, -0.0180, -0.0375,  ...,  1.2264,  2.8765, -1.4788],
        [ 0.0874,  0.0437,  0.0043,  ..., -0.0034, -0.0415,  0.0338]],
       device='cuda:0'), tensor([2, 2, 6, 0, 0, 1, 0, 0, 1, 0, 6, 3, 4, 1, 5, 0, 4, 1, 5, 4, 1, 6, 6, 5,
        4, 1, 2, 4, 4, 3, 1, 2, 4, 4, 4, 1, 0, 1, 5, 5, 1, 0, 1, 6, 4, 1, 5, 6,
        6, 4, 0, 5, 0, 6, 3, 4, 0, 5, 5, 6, 3, 1, 5, 0], device='cuda:0')), (tensor([[-0.0679,  0.1162, -0.0320,  ...,  0.1672,  0.0979, -0.0325],
        [ 0.0066,  0.0236,  0.0091,  ..., -0.0244, -0.0060, -0.0036],
        [-0.0146,  0.0327,  0.0297,  ...,  0.0449, -0.0172,  0.0558],
        ...,
        [ 0.0795,  0.0337, -0.0597,  ..., -0.0354, -0.0912,  0.0697],
        [ 0.0395, -0.0212,  0.0166,  ...,  0.0987,  0.7777, -0.2923],
        [ 0.0614,  0.0256, -0.0262,  ..., -0.0343, -0.0526,  0.1183]],
       device='cuda:0'), tensor([6, 0, 6, 2, 0, 5, 1, 0, 6, 1, 0, 1, 0, 1, 6, 2, 6, 1, 1, 3, 0, 4, 1, 2,
        0, 6, 1, 4, 6, 2, 2, 2, 3, 4, 5, 5, 1, 0, 0, 4, 2, 6, 3, 5, 5, 6, 6, 5,
        4, 0, 3, 4, 1, 2, 2, 1, 2, 6, 4, 1, 1, 6, 5, 1], device='cuda:0')), (tensor([[ 0.0462,  0.0715, -0.0548,  ...,  0.1056,  0.0227,  0.0366],
        [-0.0720,  0.1554, -0.0183,  ...,  0.0324,  0.2465, -0.2425],
        [ 0.0768,  0.0819,  0.0255,  ...,  0.0107, -0.0109,  0.0284],
        ...,
        [-0.0397,  0.0470,  0.1364,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0656,  0.0010, -0.0495,  ...,  0.1719,  0.1385, -0.0997],
        [-0.0170,  0.0237, -0.0473,  ...,  0.0018, -0.0343,  0.0453]],
       device='cuda:0'), tensor([6, 0, 0, 1, 1, 6, 3, 5, 1, 6, 6, 5, 0, 6, 0, 3, 2, 1, 1, 2, 2, 4, 2, 2,
        1, 1, 6, 6, 6, 3, 2, 1, 5, 3, 1, 3, 0, 1, 1, 6, 1, 6, 6, 0, 0, 4, 2, 1,
        1, 4, 3, 6, 6, 0, 5, 1, 1, 2, 5, 1, 1, 1, 6, 0], device='cuda:0')), (tensor([[ 0.1078,  0.0405, -0.0218,  ...,  0.0091, -0.0138,  0.0286],
        [-0.0629,  0.0617, -0.0335,  ...,  0.0064, -0.0098,  0.0409],
        [ 0.0087,  0.0052, -0.0053,  ...,  0.0832, -0.0685,  0.0681],
        ...,
        [-0.0247,  0.1383, -0.0190,  ...,  0.0085, -0.0145,  0.0289],
        [ 0.0412,  0.0193, -0.1006,  ...,  0.6813,  1.1076, -0.5537],
        [ 0.0106,  0.0659, -0.0689,  ...,  0.0115, -0.0221,  0.0446]],
       device='cuda:0'), tensor([2, 0, 6, 6, 4, 4, 0, 5, 2, 5, 5, 1, 0, 4, 4, 6, 6, 4, 2, 3, 4, 0, 2, 6,
        5, 5, 1, 0, 4, 2, 2, 4, 2, 4, 6, 0, 5, 1, 0, 6, 5, 1, 4, 4, 2, 4, 6, 3,
        0, 1, 5, 0, 1, 5, 1, 0, 2, 4, 3, 6, 1, 0, 5, 2], device='cuda:0')), (tensor([[ 2.8861e-02,  8.7193e-02, -4.5470e-02,  ...,  5.6102e-02,
         -1.0135e-03, -5.0698e-02],
        [-4.8363e-02,  1.1432e-01, -7.0196e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-7.0725e-04,  1.0469e-01, -8.3655e-03,  ...,  4.3196e-01,
          2.0697e+00, -1.5540e+00],
        ...,
        [ 4.0423e-02,  2.9881e-02, -3.2485e-02,  ..., -3.9167e-03,
         -2.2919e-02,  4.3496e-02],
        [-6.8046e-02,  4.5643e-02, -9.2643e-02,  ...,  1.1428e-02,
         -2.9490e-02,  4.1379e-02],
        [ 2.3087e-02,  5.9856e-02, -6.6133e-02,  ...,  3.6928e-03,
          1.8640e-01, -1.2233e-01]], device='cuda:0'), tensor([6, 2, 5, 0, 4, 1, 1, 5, 6, 5, 4, 6, 0, 5, 5, 6, 3, 6, 1, 5, 6, 5, 4, 6,
        2, 0, 1, 1, 5, 5, 0, 6, 0, 2, 6, 2, 6, 1, 1, 6, 3, 0, 5, 1, 1, 2, 3, 6,
        1, 1, 3, 1, 1, 2, 6, 4, 1, 1, 2, 5, 6, 2, 4, 6], device='cuda:0')), (tensor([[ 0.0731,  0.1563, -0.0150,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0381,  0.1466,  0.0580,  ...,  0.3733,  0.3321, -0.4009],
        [ 0.0498,  0.0087, -0.0233,  ..., -0.0037, -0.0300,  0.0408],
        ...,
        [-0.0123,  0.0016, -0.0432,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0056,  0.0855,  0.0487,  ..., -0.0016, -0.0341,  0.0858],
        [ 0.0147,  0.0447, -0.0385,  ...,  0.0223, -0.0276,  0.0379]],
       device='cuda:0'), tensor([0, 6, 4, 0, 0, 3, 6, 2, 5, 4, 2, 4, 0, 1, 4, 1, 4, 2, 6, 1],
       device='cuda:0'))], 'env2_out': [(tensor([[-1.2560e-02, -7.2731e-03, -4.9421e-02,  ...,  1.2447e-02,
         -2.1814e-02,  3.0944e-02],
        [ 8.0650e-02,  5.0275e-03,  1.7471e-02,  ...,  1.8104e+00,
          4.6778e+00, -1.9076e+00],
        [ 9.2405e-02,  5.2210e-02, -1.2827e-02,  ..., -8.2314e-03,
         -7.8050e-02,  1.0656e-01],
        ...,
        [ 4.4819e-02,  8.7847e-02, -4.4409e-02,  ...,  1.2554e+00,
          2.5401e+00, -1.0204e+00],
        [ 4.2662e-02,  1.3073e-01, -2.7693e-02,  ...,  1.2434e+00,
          4.5073e+00, -1.7222e+00],
        [ 2.7753e-02,  4.1715e-03, -4.3700e-02,  ...,  3.4379e-03,
         -6.1509e-02,  6.1635e-02]], device='cuda:0'), tensor([1, 5, 6, 6, 1, 6, 1, 6, 6, 3, 0, 4, 5, 3, 0, 0, 3, 2, 6, 6, 3, 5, 4, 6,
        4, 1, 5, 6, 4, 1, 1, 5, 4, 2, 1, 0, 5, 0, 0, 6, 4, 6, 0, 0, 2, 4, 2, 6,
        1, 2, 1, 1, 5, 5, 4, 4, 6, 0, 6, 3, 2, 5, 5, 6], device='cuda:0')), (tensor([[ 0.0638,  0.0270, -0.0257,  ...,  0.0126, -0.0302,  0.0314],
        [-0.0342,  0.0224,  0.0105,  ...,  0.0046, -0.0186,  0.0662],
        [ 0.1255,  0.0247, -0.0962,  ...,  1.6178,  3.6181, -1.4180],
        ...,
        [ 0.0536,  0.0767, -0.0093,  ...,  1.5944,  3.1711, -0.8694],
        [ 0.1083, -0.0386, -0.0808,  ...,  0.0106, -0.0121,  0.0291],
        [ 0.0139,  0.0441, -0.0678,  ...,  0.0174, -0.0164,  0.0223]],
       device='cuda:0'), tensor([6, 3, 5, 5, 2, 0, 6, 0, 0, 1, 1, 1, 4, 4, 2, 0, 1, 4, 6, 3, 0, 6, 6, 4,
        0, 3, 1, 4, 6, 0, 0, 6, 6, 1, 0, 4, 0, 1, 5, 1, 4, 6, 5, 6, 0, 1, 3, 5,
        5, 0, 2, 2, 6, 3, 5, 5, 6, 5, 2, 1, 3, 5, 4, 3], device='cuda:0')), (tensor([[ 0.0402,  0.0323, -0.0104,  ...,  0.8130,  2.7832, -1.8924],
        [ 0.0734,  0.0380, -0.0081,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0636,  0.0825, -0.0192,  ..., -0.0319, -0.0711,  0.1952],
        ...,
        [ 0.0177,  0.0656, -0.0123,  ...,  0.0109, -0.0122,  0.0286],
        [ 0.0482,  0.0053, -0.0262,  ..., -0.0039, -0.0215,  0.0461],
        [ 0.0109, -0.0050, -0.0289,  ..., -0.0488,  0.0131,  0.0716]],
       device='cuda:0'), tensor([5, 2, 6, 6, 0, 4, 1, 5, 1, 6, 6, 3, 5, 5, 1, 6, 4, 6, 4, 0, 3, 1, 4, 2,
        6, 5, 6, 2, 5, 2, 4, 5, 4, 1, 6, 6, 1, 1, 6, 2, 3, 6, 5, 1, 5, 6, 4, 0,
        5, 6, 6, 6, 2, 6, 4, 2, 0, 5, 6, 3, 6, 2, 6, 6], device='cuda:0')), (tensor([[ 0.0687, -0.0098, -0.0390,  ...,  0.0026, -0.0138,  0.0321],
        [ 0.0164,  0.0164, -0.0554,  ..., -0.1229, -0.0330,  0.0560],
        [ 0.0509,  0.0561, -0.0377,  ..., -0.0085, -0.0062,  0.0350],
        ...,
        [ 0.0449, -0.0065, -0.0692,  ...,  0.6650,  1.7634, -1.0273],
        [ 0.0202,  0.0948, -0.0675,  ...,  0.7135,  1.6444, -0.9402],
        [ 0.0731, -0.0235, -0.0085,  ...,  0.0345, -0.0080,  0.0282]],
       device='cuda:0'), tensor([2, 6, 1, 5, 6, 2, 4, 1, 5, 3, 1, 6, 5, 6, 4, 4, 5, 0, 5, 5, 0, 5, 6, 1,
        4, 4, 6, 3, 3, 1, 0, 5, 6, 4, 2, 6, 6, 5, 3, 0, 5, 2, 5, 2, 0, 3, 6, 1,
        0, 6, 6, 0, 1, 0, 6, 4, 5, 6, 2, 5, 4, 5, 5, 1], device='cuda:0')), (tensor([[ 5.4564e-02,  1.0413e-01,  9.2414e-02,  ...,  9.8013e-01,
          3.8837e+00, -2.2738e+00],
        [ 6.9038e-02,  2.7257e-02, -5.1354e-02,  ..., -1.5646e-02,
         -7.3773e-02,  1.2911e-01],
        [ 3.8755e-02,  8.0870e-02, -7.8938e-02,  ...,  1.5441e+00,
          3.6427e+00, -1.6090e+00],
        ...,
        [ 5.0164e-02,  1.0046e-02, -6.4895e-02,  ...,  7.6144e-01,
          3.5497e+00, -1.3681e+00],
        [ 2.7787e-02,  4.5655e-02, -4.3567e-02,  ..., -6.3246e-03,
         -2.6741e-02,  4.4632e-02],
        [ 2.7962e-02, -1.6481e-02, -4.5466e-03,  ...,  2.6697e-03,
         -3.8755e-02,  5.4760e-02]], device='cuda:0'), tensor([5, 6, 5, 6, 3, 6, 4, 1, 6, 0, 1, 3, 3, 2, 5, 5, 4, 0, 3, 6, 2, 4, 6, 0,
        1, 5, 0, 4, 3, 5, 0, 1, 0, 6, 5, 4, 4, 5, 6, 4, 1, 6, 0, 2, 2, 6, 3, 3,
        1, 3, 1, 4, 2, 3, 6, 1, 1, 1, 2, 6, 1, 5, 2, 6], device='cuda:0')), (tensor([[ 2.0944e-02,  2.0604e-02, -2.0003e-02,  ...,  1.9407e+00,
          4.5030e+00, -1.9005e+00],
        [ 3.6807e-02,  3.8758e-02, -2.0338e-02,  ...,  9.2799e-03,
         -1.3391e-02,  2.6394e-02],
        [ 6.3711e-02,  4.6575e-02, -1.9387e-02,  ..., -1.9104e-02,
         -4.3413e-02,  1.1712e-01],
        ...,
        [ 3.3574e-02,  3.8899e-02, -2.2565e-02,  ...,  4.6309e-03,
         -2.8422e-02,  2.6990e-02],
        [ 5.0441e-02,  7.9346e-02,  4.4760e-02,  ...,  8.5426e-01,
          3.2158e+00, -1.1079e+00],
        [ 6.2297e-02,  6.4304e-04, -3.5076e-02,  ..., -4.3699e-02,
         -5.4702e-02,  8.2671e-02]], device='cuda:0'), tensor([5, 1, 2, 3, 6, 5, 1, 3, 6, 3, 5, 6, 5, 6], device='cuda:0'))], 'env3_out': [(tensor([[-0.0313,  0.0276, -0.1377,  ...,  0.0077, -0.0169,  0.0379],
        [-0.0585,  0.0814, -0.0631,  ...,  0.0116, -0.0130,  0.0272],
        [ 0.0183,  0.0724,  0.0134,  ...,  0.0052, -0.0204,  0.0450],
        ...,
        [ 0.0035,  0.0607, -0.0203,  ..., -0.0007, -0.0316,  0.0560],
        [ 0.0003,  0.0569, -0.0492,  ..., -0.0936, -0.2736,  0.2089],
        [ 0.0462,  0.1048, -0.0709,  ...,  0.0086, -0.0161,  0.0293]],
       device='cuda:0'), tensor([4, 4, 2, 4, 2, 0, 4, 5, 0, 2, 4, 3, 0, 0, 1, 6, 4, 4, 0, 2, 1, 2, 6, 3,
        4, 6, 6, 3, 0, 4, 5, 2, 3, 4, 0, 1, 3, 2, 3, 2, 4, 0, 0, 2, 0, 1, 0, 4,
        4, 0, 5, 4, 2, 4, 2, 3, 4, 0, 5, 0, 3, 3, 3, 0], device='cuda:0')), (tensor([[ 4.0848e-02,  5.1483e-03, -2.5521e-02,  ...,  1.7631e-03,
         -2.9202e-02,  5.9419e-02],
        [-1.3513e-02,  5.8397e-02, -3.5767e-02,  ...,  1.0449e-04,
         -1.9962e-02,  3.7800e-02],
        [-1.5816e-03,  9.5975e-02,  2.1005e-03,  ...,  9.4210e-03,
         -1.5653e-02,  2.7926e-02],
        ...,
        [ 3.4901e-02, -1.8730e-02,  5.3382e-03,  ...,  8.2958e-03,
         -1.5465e-02,  2.8788e-02],
        [ 4.1402e-02,  1.8174e-02, -2.9189e-02,  ..., -1.7284e-02,
         -2.5349e-02,  8.7318e-02],
        [-7.5429e-03,  1.3962e-01, -2.3253e-02,  ..., -7.8521e-03,
         -2.8193e-02,  5.9691e-02]], device='cuda:0'), tensor([3, 3, 4, 0, 0, 2, 2, 1, 1, 2, 3, 4, 4, 2, 0, 3, 0, 1, 4, 1, 4, 4, 5, 1,
        1, 3, 1, 1, 0, 0, 0, 1, 0, 4, 4, 3, 2, 0, 3, 4, 6, 4, 3, 4, 3, 1, 4, 4,
        1, 6, 2, 4, 4, 1, 0, 2, 0, 2, 0, 2, 4, 0, 6, 4], device='cuda:0')), (tensor([[-0.0095,  0.0177, -0.0721,  ...,  0.0034, -0.0263,  0.0544],
        [-0.0406, -0.0239, -0.1574,  ...,  0.0013, -0.0292,  0.0592],
        [-0.0500,  0.0514, -0.1737,  ...,  0.0063, -0.0192,  0.0376],
        ...,
        [-0.0118,  0.1484, -0.0378,  ..., -0.0711, -0.0847,  0.1157],
        [-0.0227,  0.0355, -0.0371,  ..., -0.0941, -0.1458,  0.1590],
        [-0.0666,  0.2975, -0.0136,  ..., -0.0076,  0.0155,  0.0095]],
       device='cuda:0'), tensor([3, 2, 4, 0, 3, 1, 0, 6, 3, 4, 0, 2, 4, 3, 3, 2, 2, 1, 1, 1, 2, 2, 2, 3,
        1, 1, 4, 4, 1, 0, 2, 2, 1, 2, 0, 0, 4, 0, 4, 0, 3, 2, 0, 2, 0, 5, 3, 2,
        1, 3, 4, 4, 4, 1, 4, 4, 3, 2, 3, 4, 1, 4, 0, 1], device='cuda:0')), (tensor([[-0.0759,  0.0487, -0.0509,  ...,  0.0065, -0.0229,  0.0384],
        [-0.0743,  0.2115, -0.0322,  ..., -0.0404,  0.0009,  0.0218],
        [ 0.0058,  0.0145, -0.0495,  ..., -0.0783, -0.0188,  0.1036],
        ...,
        [ 0.0440,  0.0631, -0.0986,  ...,  0.0031, -0.0016,  0.0500],
        [-0.0894,  0.1341, -0.0665,  ...,  0.0044, -0.0230,  0.0455],
        [ 0.0377,  0.0597, -0.0122,  ..., -0.0430, -0.0490,  0.0730]],
       device='cuda:0'), tensor([0, 0, 3, 1, 4, 2, 2, 2, 4, 3, 2, 6, 3, 0, 4, 2, 3, 3, 2, 4, 0, 1, 0, 0,
        1, 3, 4, 2, 6, 0, 4, 0, 1, 3, 4, 2, 4, 1, 1, 4, 3, 1, 1, 2, 3, 2, 0, 3,
        1, 3, 0, 1, 1, 4, 1, 4, 2, 0, 4, 3, 1, 0, 1, 0], device='cuda:0')), (tensor([[-0.0287,  0.0220,  0.0099,  ..., -0.0906, -0.1003,  0.1135],
        [-0.1236,  0.2272, -0.1100,  ..., -0.0064, -0.0157,  0.0242],
        [-0.0281,  0.1268,  0.0036,  ...,  0.0115, -0.0108,  0.0266],
        ...,
        [-0.0187,  0.1386, -0.0061,  ...,  0.0210,  0.0079,  0.0780],
        [ 0.0491,  0.1903,  0.0084,  ...,  0.0031, -0.0165,  0.0334],
        [ 0.0206, -0.0154, -0.0479,  ...,  0.0013, -0.0148,  0.0349]],
       device='cuda:0'), tensor([3, 1, 4, 2, 3, 3, 4, 4, 0, 0, 0, 1, 3, 6, 1, 0, 0, 1, 4, 1, 0, 1, 3, 3,
        0, 6, 0, 6, 1, 5, 1, 1, 2, 3, 0, 2, 4, 0, 4, 1, 4, 3, 2, 4, 4, 1, 5, 4,
        0, 2, 1, 6, 2, 1, 5, 2, 3, 0, 4, 3, 2, 4, 0, 3], device='cuda:0')), (tensor([[ 0.0401, -0.0301, -0.0507,  ..., -0.1104, -0.1313,  0.1263],
        [-0.0151,  0.0312, -0.0386,  ..., -0.0133, -0.0232,  0.0724],
        [ 0.0044,  0.2188,  0.0714,  ...,  0.0084, -0.0168,  0.0256],
        ...,
        [-0.0019,  0.0416, -0.0061,  ..., -0.0075, -0.0393,  0.0677],
        [ 0.0045,  0.0085, -0.0578,  ...,  0.0043, -0.0170,  0.0335],
        [-0.0751,  0.0327, -0.0448,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([4, 0, 4, 2, 0, 2, 4, 0, 0, 2, 2, 2, 2, 3, 3, 4, 0, 0, 4, 0, 6, 3, 0, 1,
        6, 4, 4, 3, 3, 4, 4, 2, 3, 4, 5, 3, 0, 3, 4, 4, 1, 3, 0, 2, 0, 2, 1, 2,
        1, 0, 6, 6, 2, 4, 0, 3, 1, 5, 4, 2, 2, 3, 3, 0], device='cuda:0')), (tensor([[ 0.0716,  0.1959, -0.0066,  ...,  0.0090, -0.0136,  0.0286],
        [ 0.0116, -0.0405, -0.1404,  ...,  0.0101, -0.0135,  0.0341],
        [ 0.0076,  0.1644, -0.0063,  ..., -0.0108,  0.0026,  0.0374],
        ...,
        [ 0.0256,  0.1653, -0.0828,  ...,  0.0115, -0.0108,  0.0266],
        [ 0.0403, -0.0191, -0.0599,  ...,  0.0036, -0.0255,  0.0495],
        [ 0.0486, -0.0043, -0.0359,  ..., -0.0002, -0.0206,  0.0378]],
       device='cuda:0'), tensor([4, 1, 1, 2, 0, 4, 1, 1, 3, 0, 0, 2, 4, 6, 1, 4, 0, 2, 4, 6, 6, 1, 4, 1,
        3, 2, 3, 1, 2, 4, 2, 4, 2, 3, 5, 0, 2, 4, 2, 1, 1, 4, 4, 2, 1, 1, 6, 6,
        3, 1, 2, 0, 3, 1, 2, 2, 3, 1, 4, 3, 2, 1, 3, 4], device='cuda:0')), (tensor([[-2.5304e-04,  7.7607e-02, -1.3489e-01,  ...,  1.1427e-02,
          2.0691e-02,  4.3035e-02],
        [-1.1623e-01,  1.3872e-01,  3.2179e-02,  ...,  9.2267e-03,
         -3.3193e-02,  5.0367e-02],
        [-1.3642e-01,  4.6947e-02, -2.2624e-02,  ...,  2.9309e-01,
          3.3190e-01, -3.0692e-01],
        ...,
        [-4.8328e-02,  1.9986e-01, -8.1669e-02,  ...,  1.1483e-02,
         -1.0772e-02,  2.6626e-02],
        [-1.0168e-01,  2.9524e-01,  2.9004e-02,  ...,  1.1775e-02,
         -1.6880e-02,  2.8173e-02],
        [-1.0608e-01, -1.0547e-02, -1.2240e-01,  ...,  3.7479e-03,
         -2.4765e-02,  5.7511e-02]], device='cuda:0'), tensor([1, 0, 2, 2, 1, 0, 0, 0, 0, 2, 4, 3, 4, 4, 2, 0, 0, 4, 3, 3, 4, 0, 4, 4,
        3, 3, 1, 0, 2, 2, 0, 2, 4, 2, 0, 3, 2, 3, 1, 1, 2, 2, 0, 4, 3, 1, 4, 3,
        4, 4, 3, 3, 2, 1, 2, 1, 1, 2, 4, 4, 1, 1, 2, 0], device='cuda:0')), (tensor([[-0.0061,  0.0366, -0.1021,  ..., -0.0087, -0.0562,  0.1035],
        [-0.0857,  0.0606, -0.0703,  ...,  0.0015, -0.0289,  0.0570],
        [ 0.0122,  0.2221,  0.0754,  ...,  0.0098, -0.0280,  0.0365],
        ...,
        [ 0.0051,  0.0823, -0.0099,  ..., -0.0015, -0.0181,  0.0486],
        [ 0.1838,  0.0458, -0.0049,  ...,  0.0083, -0.0149,  0.0295],
        [-0.0127,  0.0144, -0.1207,  ...,  0.0662,  0.0507,  0.0402]],
       device='cuda:0'), tensor([2, 2, 2, 6, 4, 3, 4, 2, 5, 0, 2, 2, 0, 4, 4, 2, 6, 2, 3, 0, 2, 4, 3, 0,
        3, 3, 0, 0, 5, 1, 4, 3, 3, 6, 1, 3, 1, 2, 4, 3, 0, 4, 2, 2, 1, 0, 4, 1,
        1, 1, 1, 0, 3, 0, 4, 4, 0, 3, 4, 0, 3, 2, 0, 3], device='cuda:0')), (tensor([[ 0.0190,  0.0121, -0.0131,  ..., -0.1349, -0.2592,  0.1107],
        [ 0.0246,  0.0749, -0.0216,  ...,  0.0103, -0.0123,  0.0276],
        [-0.0087,  0.0768, -0.1129,  ..., -0.0191, -0.0291,  0.0783],
        ...,
        [ 0.0281,  0.0173, -0.0703,  ...,  0.0005, -0.0176,  0.0422],
        [-0.0031, -0.0369, -0.0613,  ..., -0.0074, -0.0330,  0.0649],
        [-0.0356,  0.0713, -0.0086,  ..., -0.0112, -0.0630,  0.0661]],
       device='cuda:0'), tensor([6, 0, 3, 3, 6, 2, 4, 3, 2, 1, 2, 2, 3, 5, 2, 1, 2, 3, 1, 4, 1, 0, 4, 1,
        0, 4, 0, 0, 1, 1, 2, 6, 1, 4, 2, 1, 0, 3, 0, 0, 4, 4, 4, 3, 1, 2, 2, 0,
        4, 0, 2, 0, 1, 3, 3, 2, 3, 4, 3, 3, 2, 3, 3, 0], device='cuda:0')), (tensor([[-0.1393,  0.0923, -0.0467,  ..., -0.0144, -0.0517,  0.0557],
        [ 0.0124,  0.0301, -0.0419,  ..., -0.0627, -0.0933,  0.0963],
        [-0.0269,  0.0958, -0.1204,  ...,  0.0207,  0.1361, -0.1697],
        ...,
        [ 0.0383,  0.0371,  0.0041,  ...,  0.0052, -0.0230,  0.0395],
        [ 0.0849,  0.0820,  0.0293,  ..., -0.0806, -0.0779,  0.1190],
        [ 0.0091,  0.1553, -0.0556,  ...,  0.0115, -0.0108,  0.0266]],
       device='cuda:0'), tensor([1, 0, 0, 0, 2, 4, 4, 2, 0, 4, 2, 3, 0, 2, 0, 4, 5, 3, 4, 1, 2, 6, 4, 2,
        3, 1, 2, 3, 3, 0, 0, 0, 4, 0, 4, 4, 4, 5, 1, 0, 2, 3, 0, 1, 1, 1, 4, 2,
        3, 1, 0, 2, 4, 1, 4, 4, 3, 4, 0, 1, 4, 2, 3, 0], device='cuda:0')), (tensor([[-0.0039,  0.0791, -0.0129,  ..., -0.0081, -0.0241,  0.0553],
        [-0.0425,  0.0343,  0.0085,  ...,  0.0089, -0.0140,  0.0284],
        [-0.0277,  0.1605, -0.0555,  ..., -0.0030, -0.0363,  0.0513],
        ...,
        [ 0.0814,  0.1932,  0.0193,  ..., -0.0068, -0.0215,  0.0435],
        [ 0.0128,  0.0270, -0.0530,  ...,  0.0060, -0.0129,  0.0303],
        [-0.0016,  0.0451, -0.0453,  ...,  0.0018, -0.0133,  0.0470]],
       device='cuda:0'), tensor([3, 1, 1, 2, 0, 1, 4, 2, 4, 1, 4, 4, 1, 3, 0, 0, 1, 0, 1, 0, 0, 0, 4, 1,
        3, 2, 3, 1, 3, 2, 4, 3, 3, 4, 4, 0, 3, 2, 4, 4, 6, 1, 1, 4, 0, 1, 1, 0,
        3, 4, 2, 1, 3, 2, 2, 0, 1, 1, 3, 1, 1, 0, 4, 3], device='cuda:0')), (tensor([[-0.0852,  0.0801, -0.0280,  ...,  0.0049, -0.0261,  0.0500],
        [-0.0285,  0.1061, -0.1012,  ...,  0.0006, -0.0283,  0.0506],
        [-0.0256,  0.0403, -0.1032,  ...,  0.0033, -0.0263,  0.0493],
        ...,
        [ 0.0614,  0.0901,  0.0510,  ..., -0.0057, -0.0246,  0.0849],
        [ 0.0328,  0.1822,  0.0546,  ...,  0.0084, -0.0148,  0.0293],
        [ 0.0098,  0.0134, -0.0112,  ...,  0.1861, -0.0402, -0.0111]],
       device='cuda:0'), tensor([0, 1, 2, 3, 4, 4, 2, 0, 1, 1, 0, 2, 1, 1, 0, 2, 5], device='cuda:0'))]}
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 253, in <module>
    feature_df.to_csv(os.path.join(args.output_dir, 'features.csv'), index=False)
    ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'to_csv'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
dict_keys(['env0_in', 'env1_in', 'env2_in', 'env3_in', 'env0_out', 'env1_out', 'env2_out', 'env3_out'])
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 253, in <module>
    feature_df.to_csv(os.path.join(args.output_dir, 'features.csv'), index=False)
    ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'to_csv'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    feature_df = misc.dataframe_from_features(features)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 242, in dataframe_from_features
    return pd.DataFrame.from_dict(df)
           ^^
NameError: name 'pd' is not defined. Did you mean: 'pdb'?
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    feature_df = misc.dataframe_from_features(features)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 243, in dataframe_from_features
    return pd.DataFrame.from_dict(df)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/pandas/core/frame.py", line 1917, in from_dict
    return cls(data, index=index, columns=columns, dtype=dtype)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/pandas/core/frame.py", line 778, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/pandas/core/internals/construction.py", line 503, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/pandas/core/internals/construction.py", line 114, in arrays_to_mgr
    index = _extract_index(arrays)
            ^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/pandas/core/internals/construction.py", line 664, in _extract_index
    raise ValueError("Per-column arrays must each be 1-dimensional")
ValueError: Per-column arrays must each be 1-dimensional
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 258, in <module>
    best_results = adjust_best_results(best_results, results)
                                       ^^^^^^^^^^^^
NameError: name 'best_results' is not defined
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 258, in <module>
    best_results = adjust_best_results(best_results, results)
                                       ^^^^^^^^^^^^
NameError: name 'best_results' is not defined
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 260, in <module>
    if results_keys != last_results_keys:
                       ^^^^^^^^^^^^^^^^^
NameError: name 'last_results_keys' is not defined. Did you mean: 'results_keys'?
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
0.9975594875  0.9242053790  0.9957356077  0.9487179487  0.9970059880  0.9550898204  0.7531806616  0.7605095541  7.3959884644 
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 273, in <module>
    start_step = step + 1
                 ^^^^
NameError: name 'step' is not defined
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
0.9975594875  0.9242053790  0.9957356077  0.9487179487  0.9970059880  0.9550898204  0.7531806616  0.7605095541  7.3959884644 
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 10000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
env0_in_acc   env0_out_acc  env1_in_acc   env1_out_acc  env2_in_acc   env2_out_acc  env3_in_acc   env3_out_acc  epoch         loss          mem_gb        step          step_time    
0.1866992068  0.1613691932  0.1780383795  0.1581196581  0.1205089820  0.1347305389  0.1851145038  0.1872611465  0.0000000000  8.4749317169  1.3144865036  0             1.5595366955 
0.9225137279  0.9168704156  0.9168443497  0.8910256410  0.9820359281  0.9311377246  0.6269083969  0.6267515924  1.7964071856  5.4642556338  1.4513602257  300           0.3094913419 
0.9591214155  0.9168704156  0.9482942431  0.9059829060  0.9902694611  0.9520958084  0.6797073791  0.6764331210  3.5928143713  5.3435362506  1.4513602257  600           0.2801521309 
0.9719341062  0.9168704156  0.9786780384  0.9230769231  0.9955089820  0.9550898204  0.6870229008  0.6840764331  5.3892215569  5.0572210089  1.4513602257  900           0.2783474056 
0.9646125686  0.8899755501  0.9717484009  0.9273504274  0.9910179641  0.9610778443  0.5731552163  0.5770700637  7.1856287425  5.2143623694  1.4513602257  1200          0.2719299356 
0.9816961562  0.8948655257  0.9802771855  0.9273504274  0.9977544910  0.9640718563  0.6733460560  0.6611464968  8.9820359281  5.0245402042  1.4513602257  1500          0.2757344158 
0.9847467968  0.9193154034  0.9888059701  0.9337606838  0.9985029940  0.9580838323  0.6447201018  0.6382165605  10.778443113  5.0822467629  1.4513602257  1800          0.2793004020 
0.9841366687  0.8875305623  0.9738805970  0.9081196581  0.9970059880  0.9580838323  0.6777989822  0.6636942675  12.574850299  5.0407176960  1.4513602257  2100          0.2762967141 
0.9884075656  0.9193154034  0.9818763326  0.9337606838  0.9970059880  0.9670658683  0.7051526718  0.7108280255  14.371257485  4.9883094565  1.4513602257  2400          0.2760367354 
0.9902379500  0.9242053790  0.9850746269  0.9273504274  0.9992514970  0.9401197605  0.7045165394  0.7146496815  16.167664670  4.9485315228  1.4513602257  2700          0.2934973248 
0.9884075656  0.9046454768  0.9861407249  0.9316239316  0.9970059880  0.9281437126  0.7258269720  0.7452229299  17.964071856  5.0249107679  1.4513602257  3000          0.3028688478 
0.9951189750  0.9266503667  0.9914712154  0.9444444444  0.9992514970  0.9610778443  0.6943384224  0.6980891720  19.760479041  4.9035093156  1.4513602257  3300          0.3121245535 
0.9914582062  0.8924205379  0.9930703625  0.9358974359  0.9962574850  0.9491017964  0.7261450382  0.7171974522  21.556886227  4.9128850091  1.4513602257  3600          0.3068809215 
0.9975594875  0.9070904645  0.9968017058  0.9358974359  0.9985029940  0.9461077844  0.6793893130  0.6777070064  23.353293413  4.9752492579  1.4513602257  3900          0.3507497319 
0.9969493594  0.9290953545  0.9962686567  0.9423076923  0.9970059880  0.9491017964  0.7013358779  0.7019108280  25.149700598  4.8242773430  1.4513602257  4200          0.3437663881 
0.9981696156  0.8997555012  0.9930703625  0.9380341880  1.0000000000  0.9520958084  0.6819338422  0.6866242038  26.946107784  4.8319731736  1.4513602257  4500          0.3434070484 
0.9951189750  0.8973105134  0.9904051173  0.9273504274  0.9977544910  0.9491017964  0.6494910941  0.6369426752  28.742514970  4.8871394571  1.4513602257  4800          0.3498877629 
0.9963392312  0.9022004890  0.9941364606  0.9252136752  1.0000000000  0.9491017964  0.6882951654  0.6853503185  30.538922155  4.8266073493  1.4513602257  5100          0.3540822879 
0.9938987187  0.8973105134  0.9962686567  0.9401709402  0.9992514970  0.9491017964  0.7286895674  0.7464968153  32.335329341  4.7429040825  1.4513602257  5400          0.3609355815 
0.9963392312  0.9144254279  0.9952025586  0.9487179487  0.9962574850  0.9670658683  0.7531806616  0.7605095541  34.131736526  4.8354395350  1.4513602257  5700          0.3593367060 
0.9762050031  0.8850855746  0.9898720682  0.9358974359  0.9962574850  0.9431137725  0.6326335878  0.6471337580  35.928143712  4.8062170887  1.4513602257  6000          0.3588188163 
0.9975594875  0.9022004890  0.9952025586  0.9252136752  0.9992514970  0.9580838323  0.6459923664  0.6522292994  37.724550898  4.9108014441  1.4513602257  6300          0.3715032419 
0.9963392312  0.9070904645  0.9994669510  0.9465811966  0.9992514970  0.9491017964  0.7465012723  0.7503184713  39.520958083  4.7682815087  1.4513602257  6600          0.3625019638 
0.9957291031  0.9339853301  0.9968017058  0.9358974359  0.9970059880  0.9461077844  0.7398218830  0.7579617834  41.317365269  4.8764345598  1.4513602257  6900          0.3515372276 
0.9975594875  0.9339853301  0.9984008529  0.9423076923  1.0000000000  0.9730538922  0.7426844784  0.7401273885  43.113772455  4.7956887666  1.4513602257  7200          0.3462518072 
0.9908480781  0.9119804401  0.9904051173  0.9401709402  0.9992514970  0.9371257485  0.6898854962  0.6751592357  44.910179640  4.8237671808  1.4513602257  7500          0.3533631023 
0.9957291031  0.9144254279  0.9989339019  0.9380341880  0.9992514970  0.9610778443  0.7223282443  0.7044585987  46.706586826  4.8418771537  1.4513602257  7800          0.3542945210 
0.9920683344  0.9022004890  0.9925373134  0.9401709402  0.9985029940  0.9341317365  0.7223282443  0.7197452229  48.502994012  4.7695548785  1.4513602257  8100          0.3419493008 
0.9981696156  0.9266503667  0.9973347548  0.9465811966  0.9992514970  0.9760479042  0.7369592875  0.7133757962  50.299401197  4.9060710390  1.4513602257  8400          0.2941868750 
0.9896278218  0.9095354523  0.9946695096  0.9465811966  0.9947604790  0.9431137725  0.7487277354  0.7439490446  52.095808383  4.8916170470  1.4513602257  8700          0.3006551449 
0.9908480781  0.8728606357  0.9973347548  0.9358974359  0.9985029940  0.9491017964  0.7305979644  0.7299363057  53.892215568  4.7960865402  1.4513602257  9000          0.2985047714 
0.9975594875  0.9022004890  0.9978678038  0.9423076923  0.9992514970  0.9550898204  0.7363231552  0.7286624204  55.688622754  4.7984185874  1.4513602257  9300          0.2962862158 
0.9957291031  0.9217603912  0.9920042644  0.9358974359  0.9985029940  0.9550898204  0.6774809160  0.6777070064  57.485029940  4.8443085786  1.4513602257  9600          0.2914047313 
0.9853569250  0.8679706601  0.9962686567  0.9316239316  0.9985029940  0.9431137725  0.7379134860  0.7337579618  59.281437125  4.7534869250  1.4513602257  9900          0.2941298803 
0.9969493594  0.9119804401  0.9973347548  0.9358974359  0.9977544910  0.9401197605  0.7270992366  0.7324840764  59.874251497  4.7866571588  1.4513602257  9999          0.3007343345 
========== Best Results ==========
0.9981696156  0.9339853301  0.9994669510  0.9487179487  1.0000000000  0.9760479042  0.7531806616  0.7605095541  59.874251497  8.4749317169  1.4513602257  9999          1.5595366955 
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
0.9975594875  0.9242053790  0.9957356077  0.9487179487  0.9970059880  0.9550898204  0.7531806616  0.7605095541  7.3959884644 
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    features_np = misc.dataframe_from_features(features)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 249, in dataframe_from_features
    features = PCA(n_components=512).fit_transform(features)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 454, in fit_transform
    U, S, Vt = self._fit(X)
               ^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 514, in _fit
    return self._fit_full(X, n_components)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 530, in _fit_full
    raise ValueError(
ValueError: n_components=512 must be between 0 and min(n_samples, n_features)=409 with svd_solver='full'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    features_np = misc.dataframe_from_features(features)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 249, in dataframe_from_features
    features = PCA(n_components=400).fit_transform(features)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 454, in fit_transform
    U, S, Vt = self._fit(X)
               ^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 514, in _fit
    return self._fit_full(X, n_components)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 530, in _fit_full
    raise ValueError(
ValueError: n_components=400 must be between 0 and min(n_samples, n_features)=334 with svd_solver='full'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    features_np = misc.dataframe_from_features(features)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 249, in dataframe_from_features
    features = PCA(n_components=512, svd_solver='randomized').fit_transform(features)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 454, in fit_transform
    U, S, Vt = self._fit(X)
               ^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 516, in _fit
    return self._fit_truncated(X, n_components, self._fit_svd_solver)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 619, in _fit_truncated
    raise ValueError(
ValueError: n_components=512 must be between 1 and min(n_samples, n_features)=409 with svd_solver='randomized'
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([39, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([39, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([20, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([20, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([56, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([56, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([8, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([8, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([25, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([25, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([20, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([20, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([14, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([14, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([17, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([64, 16384])
torch.Size([17, 16384])
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/scripts/test.py", line 252, in <module>
    features_np = misc.dataframe_from_features(features)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/nmduong/hust/m2cl/domainbed/lib/misc.py", line 249, in dataframe_from_features
    features = PCA(n_components=512, svd_solver='randomized').fit_transform(features)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 454, in fit_transform
    U, S, Vt = self._fit(X)
               ^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 516, in _fit
    return self._fit_truncated(X, n_components, self._fit_svd_solver)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 656, in _fit_truncated
    U, S, Vt = randomized_svd(
               ^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/_param_validation.py", line 186, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/sklearn/utils/extmath.py", line 542, in randomized_svd
    Uhat, s, Vt = linalg.svd(
                  ^^^^^^^^^^^
  File "/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/scipy/linalg/_decomp_svd.py", line 141, in svd
    u, s, v, info = gesXd(a1, compute_uv=compute_uv, lwork=lwork,
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
0.9975594875  0.9242053790  0.9957356077  0.9487179487  0.9970059880  0.9550898204  0.7531806616  0.7605095541  7.3974685669 
Environment:
	Python: 3.11.8
	PyTorch: 2.2.2+cu121
	Torchvision: 0.17.2+cu121
	CUDA: 12.1
	CUDNN: 8902
	NumPy: 1.26.4
	PIL: 10.3.0
Args:
	algorithm: M2CL
	alpha: None
	batch_size: 8
	beta: None
	checkpoint_freq: None
	data_dir: ./domainbed/data/
	dataset: PACS
	holdout_fraction: 0.2
	hparams: None
	hparams_seed: 0
	lparam: None
	lr: None
	output_dir: M2CL
	pretrain: /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
	save_model_every_checkpoint: False
	seed: 0
	skip_model_save: False
	steps: 15000
	task: domain_generalization
	temp: None
	test_envs: [3]
	trial_seed: 0
	uda_holdout_fraction: 0
HParams:
	batch_size: 8
	class_balanced: False
	data_augmentation: True
	lparam: None
	lr: 5e-05
	nonlinear_classifier: False
	resnet18: True
	resnet_dropout: 0.0
	temp: None
	weight_decay: 0.0
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/mnt/disk1/anaconda3/envs/nmduong/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Load checkpoint from /mnt/disk1/nmduong/hust/m2cl/M2CL/model_best_env3_out_acc.pkl
0.9975594875  0.9242053790  0.9957356077  0.9487179487  0.9970059880  0.9550898204  0.7531806616  0.7605095541  7.3959884644 
